# =========================================================================
#  The Mobile Robot Programming Toolkit (MRPT) CMake configuration file
#
#             ** File generated automatically, do not modify **
#
#  Usage from an external project:
#   In your CMakeLists.txt, add these lines:
#
#    find_package( MRPT REQUIRED )  # Default: Use mrpt-slam & mrpt-topography
#     or
#    find_package( MRPT REQUIRED base vision hwdrivers ... )
#
#    target_link_libraries(MY_TARGET_NAME ${MRPT_LIBRARIES})
#
#
#   The libraries or "modules" which can be included are
#   (see the full list and description in: https://www.mrpt.org/Libraries )
#     - poses          --> libmrpt-poses
#     - opengl         --> libmrpt-opengl
#     - hwdrivers      --> libmrpt-hwdrivers
#     - nav            --> libmrpt-nav
#
#   This file will define the following variables:
#    - MRPT_LIBRARIES        : The list of libraries to links against.
#    - MRPT_LIBS             : Like MRPT_LIBRARIES, for backward compat.
#    - MRPT_INCLUDE_DIRS     : The list of include directories
#    - MRPT_LINK_DIRECTORIES : The list of link directories
#    - MRPT_VERSION          : The MRPT version (e.g. "1.0.0").
#    - MRPT_VERSION_{MAJOR,MINOR,PATCH}: 3 variables for the version parts
#
#   Optional input variables:
#    - (Windows only) MRPT_DONT_USE_DBG_LIBS: If defined at input, before the
#         "find_package(MRPT...)", and set to "1", will not search for `-dbg`
#         libraries when linking in "Debug" CMake builds.
#
# =========================================================================

# MRPT version numbers:
set(MRPT_VERSION @CMAKE_MRPT_FULL_VERSION@)
set(MRPT_VERSION_MAJOR @CMAKE_MRPT_VERSION_NUMBER_MAJOR@)
set(MRPT_VERSION_MINOR @CMAKE_MRPT_VERSION_NUMBER_MINOR@)
set(MRPT_VERSION_PATCH @CMAKE_MRPT_VERSION_NUMBER_PATCH@)

# Require C++17
if (MSVC)
	add_compile_options("/std:c++latest")
	add_compile_options("-D_ENABLE_EXTENDED_ALIGNED_STORAGE")
else()
	if(${CMAKE_VERSION} VERSION_LESS "3.8.0")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
		unset(CMAKE_CXX_STANDARD) # Required not to override the flag above to c++14 or lower
	else()
		if ("${CMAKE_CXX_STANDARD}" STREQUAL "" OR "${CMAKE_CXX_STANDARD}" LESS 17)
			set(CMAKE_CXX_STANDARD 17)
		endif()
	endif()
endif()

# missing math consts (M_PI) in msvc:
if(MSVC)
	add_definitions(-D_USE_MATH_DEFINES)
endif()

# Extract the directory where *this* file has been installed (determined at cmake run-time)
get_filename_component(THIS_MRPT_CONFIG_PATH "${CMAKE_CURRENT_LIST_FILE}" PATH)

# MRPT source dir
set(MRPT_SOURCE_DIR "@THE_MRPT_SOURCE_DIR@")
set(MRPT_LIBS_INCL_DIR "@THE_MRPT_LIBS_INCL_DIR@")

# MRPT binary dir
set(MRPT_DIR "@THE_CMAKE_BINARY_DIR@")

# MRPT include directory for "config.h"
set(MRPT_CONFIG_DIR "@THE_MRPT_CONFIG_FILE_INCLUDE_DIR@")

#message(STATUS "MRPT_FIND_COMPONENTS: ${MRPT_FIND_COMPONENTS}")

# MRPT include directories
set(MRPT_INCLUDE_DIRS "@THE_INCLUDE_DIRECTORIES@")

# MRPT library directories
set(MRPT_LINK_DIRECTORIES "@THE_LINK_DIRECTORIES@")

# ======================================================
# Include directories where Eigen3 headers are... if
#  they are not embedded under mrpt-base headers:
# ======================================================
if (NOT @MRPT_CONFIGFILE_IS_INSTALL@ OR NOT @EIGEN_USE_EMBEDDED_VERSION_BOOL@)
	include_directories("@MRPT_EIGEN_INCLUDE_DIR@")
	list(APPEND MRPT_INCLUDE_DIRS "@MRPT_EIGEN_INCLUDE_DIR@")
endif ()

# If using GCC and -Wall, eigen3 headers raise some warnings: silent them:
if(CMAKE_COMPILER_IS_GNUCXX)
	add_compile_options(-Wno-long-long -Wno-variadic-macros)
	# Workaround: Eigen <3.4 produces *tons* of warnings in GCC >=6. See http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1221
	if (NOT ${CMAKE_CXX_COMPILER_VERSION} LESS "6.0")
		add_compile_options(-Wno-ignored-attributes -Wno-int-in-bool-context)
	endif()
endif()

# ======================================================
# Include directories to add to the user project:
# ======================================================
include_directories(${MRPT_CONFIG_DIR})
list(APPEND MRPT_INCLUDE_DIRS ${MRPT_CONFIG_DIR})

# OpenCV library:
if(@CMAKE_MRPT_HAS_OPENCV_SYSTEM@)    # CMAKE_MRPT_HAS_OPENCV_SYSTEM
	# Using system opencv lib:
	# Users must link against OpenCV only if MRPT is not a dynamic library:
	if (NOT @CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF@)  # CMAKE_MRPT_BUILD_SHARED_LIB
		link_directories("@OPENCV_LIBDIR@")  # OPENCV_LIBDIR
		list(APPEND MRPT_LINK_DIRECTORIES "@OPENCV_LIBDIR@")
	endif ()
endif()

# Suitesparse lib (only if present as a system lib)
if(@CMAKE_MRPT_HAS_SUITESPARSE_SYSTEM@)    # CMAKE_MRPT_HAS_SUITESPARSE_SYSTEM
	include_directories("@SuiteSparse_INCLUDE_DIRS@") # SuiteSparse_INCLUDE_DIRS
	list(APPEND MRPT_INCLUDE_DIRS "@SuiteSparse_INCLUDE_DIRS@")
endif()



# ==========================================================
# Default "MRPT_FIND_COMPONENTS" -> "slam" + "topography",
#  for backward compatibility (< MRPT 0.9.0)
# ==========================================================
if ("${MRPT_FIND_COMPONENTS}" STREQUAL "")
	set(MRPT_FIND_COMPONENTS slam topography)
endif ()

# ======================================================
# The list of MRPT libs/modules in this build
# ======================================================
set(ALL_MRPT_LIBS "@ALL_MRPT_LIBS@")
#  Start of DECLARE_LIBS_DEPS
@DECLARE_LIBS_DEPS@
#  End of DECLARE_LIBS_DEPS

#  Start of DECLARE_LIBS_HDR_ONLY
@DECLARE_LIBS_HDR_ONLY@
#  End of DECLARE_LIBS_HDR_ONLY

# Add hierarchical dependencies of MRPT libraries,
#  and replace "core"->"mrpt-core", etc.
# ================================================
set(FINAL_LIST_COMPONENTS "")
foreach(iter RANGE 1 12) # repeat to get depedencies recursively
	foreach(_MOD ${MRPT_FIND_COMPONENTS})
		string(TOLOWER ${_MOD} _MOD)
		string(REGEX REPLACE "mrpt-(.*)" "\\1" _MOD ${_MOD})
		set(_NAM "mrpt-${_MOD}")
		list(APPEND FINAL_LIST_COMPONENTS ${_NAM})
		get_property(_LIB_DEP GLOBAL PROPERTY "${_NAM}_LIB_DEPS")
		# Add deps:
		if (NOT "${_LIB_DEP}" STREQUAL "")
			list(APPEND FINAL_LIST_COMPONENTS ${_LIB_DEP})
		endif ()
	endforeach()
	set(MRPT_FIND_COMPONENTS ${FINAL_LIST_COMPONENTS})
	list(REMOVE_DUPLICATES MRPT_FIND_COMPONENTS)
endforeach()

# ======================================================
# Check:
#  All libraries must exist in the MRPT build.
#  Compare "MRPT_FIND_COMPONENTS" against "ALL_MRPT_LIBS":
# ======================================================
#message(STATUS "LIBS: ${ALL_MRPT_LIBS}")
foreach(MRPTLIB ${MRPT_FIND_COMPONENTS})
	list(FIND ALL_MRPT_LIBS "${MRPTLIB}" _LIB_IDX)
	if (_LIB_IDX EQUAL -1)
		message(FATAL_ERROR "ERROR: MRPT_FIND_COMPONENTS contains '${MRPTLIB}', not built in mrpt (built ones: ${ALL_MRPT_LIBS})")
	endif ()
endforeach()
#message(STATUS "MRPT_FIND_COMPONENTS: ${MRPT_FIND_COMPONENTS}")


# ======================================================
#   MRPT list of libraries the user should link against:
# ======================================================
set(MRPT_LIBRARIES "@MRPT_LINKER_LIBS@")

set(MRPT_COMP_HWDRIVERS 0  INTERNAL)
# Process the list:
foreach(MRPTLIB ${MRPT_FIND_COMPONENTS})
	string(TOLOWER ${MRPTLIB} MRPTLIB)
	string(REGEX REPLACE "mrpt-(.*)" "\\1" MRPTLIB ${MRPTLIB})

	# The include dir:
	include_directories("${MRPT_LIBS_INCL_DIR}/${MRPTLIB}/include")
	list(APPEND MRPT_INCLUDE_DIRS "${MRPT_LIBS_INCL_DIR}/${MRPTLIB}/include")

	# List of libs to link against:
	# If the required lib is header-only, don't add to the list of libs to link!
	get_property(_LIB_HDRONLY GLOBAL PROPERTY "mrpt-${MRPTLIB}_LIB_IS_HEADERS_ONLY")
	if(NOT _LIB_HDRONLY)
		if(WIN32 AND NOT MRPT_DONT_USE_DBG_LIBS)
			list(APPEND MRPT_LIBRARIES
				optimized @MRPT_LIB_PREFIX@mrpt-${MRPTLIB}@MRPT_DLL_VERSION_POSTFIX@
				debug     @MRPT_LIB_PREFIX@mrpt-${MRPTLIB}@MRPT_DLL_VERSION_POSTFIX@@CMAKE_DEBUG_POSTFIX@)
		else()
			list(APPEND MRPT_LIBRARIES  @MRPT_LIB_PREFIX@mrpt-${MRPTLIB}@MRPT_DLL_VERSION_POSTFIX@)
		endif()
	endif()

	if(MRPTLIB MATCHES "hwdrivers")
		set(MRPT_COMP_HWDRIVERS 1)
	endif()
endforeach()

# Handle special cases:
# libs for ffmpeg in win32 (only if building static libs)
if(MRPT_COMP_HWDRIVERS AND NOT @CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF@)
	if(@MRPT_HAS_FFMPEG_WIN32@ MATCHES "ON")  # MRPT_HAS_FFMPEG_WIN32
		foreach(FFMPGLIB "@MRPT_FFMPEG_LIBS_TO_LINK@")
			list(APPEND MRPT_LIBRARIES general "${FFMPGLIB}")
		endforeach()
	endif()
endif()

# ======================================================
# Support for wxWidgets: We only need wx libs at user
#  link time if MRPT libs are static.
# ======================================================
if(@CMAKE_MRPT_HAS_WXWIDGETS@ AND NOT @CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF@)  # CMAKE_MRPT_HAS_WXWIDGETS AND NOT CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF
	set(wxWidgets_USE_LIBS base core gl adv aui)

	if(CMAKE_BUILD_TYPE MATCHES "Debug")
		set(wxWidgets_USE_DEBUG "ON")
	else()
		set(wxWidgets_USE_REL_AND_DBG "ON")
	endif()

	find_package(wxWidgets)
	if(wxWidgets_FOUND)
		# Include wxWidgets macros
		include(${wxWidgets_USE_FILE})
		# ${wxWidgets_LIBRARIES}  will contain the libraries that should be added through target_link_libraries(...)
		link_directories(${wxWidgets_LIBRARY_DIRS})
		list(APPEND MRPT_LINK_DIRECTORIES ${wxWidgets_LIBRARY_DIRS})

		if(MSVC)
			add_definitions(-DwxUSE_NO_MANIFEST=1)
		endif()

		list(APPEND MRPT_LIBRARIES ${wxWidgets_LIBRARIES})
		if(MSVC)
			add_definitions(-D_CRT_SECURE_NO_WARNINGS)
		endif()
	else()
		message("Warning: MRPT was compiled with wxWidgets, but CMake is not able to locate wxWidgets automatically. Please, set wxWidgets_ROOT_DIR to the lib directory manually.\n You can safely ignore this warning if you don't intend to use MRPT GUI classes or wxWidgets directly from your application.")
	endif()
endif()

# ======================================================
# Support for Bumblebee
# ======================================================
if(WIN32 AND NOT @CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF@)
	if(@CMAKE_MRPT_HAS_BUMBLEBEE@)   # CMAKE_MRPT_HAS_BUMBLEBEE
		link_directories("@BUMBLEBEE_PGR_FLYCAPTURE_ROOT_DIR@/lib")
		link_directories("@BUMBLEBEE_TRICLOPS_ROOT_DIR@/lib")
		list(APPEND MRPT_LINK_DIRECTORIES "@BUMBLEBEE_PGR_FLYCAPTURE_ROOT_DIR@/lib")
		list(APPEND MRPT_LINK_DIRECTORIES "@BUMBLEBEE_TRICLOPS_ROOT_DIR@/lib")
	endif()
endif()

# ======================================================
# Link directories to add to the user project:
# ======================================================
list(APPEND MRPT_LINK_DIRECTORIES ${MRPT_DIR}/lib)
link_directories(${MRPT_LINK_DIRECTORIES})

set(MRPT_LIBS ${MRPT_LIBRARIES}) # For backward compatible code
