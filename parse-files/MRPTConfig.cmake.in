# =========================================================================
#  The Mobile Robot Programming Toolkit (MRPT) CMake configuration file
#
#             ** File generated automatically, do not modify **
#
#  Usage from an external project:
#   In your CMakeLists.txt, add these lines:
#
#    FIND_PACKAGE( MRPT REQUIRED )  # Default: Use mrpt-slam & mrpt-topography
#     or
#    FIND_PACKAGE( MRPT REQUIRED base vision hwdrivers ... )
#
#    TARGET_LINK_LIBRARIES(MY_TARGET_NAME ${MRPT_LIBRARIES})
#
#
#   The libraries or "modules" which can be included are
#   (see the full list and description in: https://www.mrpt.org/Libraries )
#     - poses          --> libmrpt-poses
#     - opengl         --> libmrpt-opengl
#     - hwdrivers      --> libmrpt-hwdrivers
#     - nav            --> libmrpt-nav
#
#   This file will define the following variables:
#    - MRPT_LIBRARIES        : The list of libraries to links against.
#    - MRPT_LIBS             : Like MRPT_LIBRARIES, for backward compat.
#    - MRPT_INCLUDE_DIRS     : The list of include directories
#    - MRPT_LINK_DIRECTORIES : The list of link directories
#    - MRPT_VERSION          : The MRPT version (e.g. "1.0.0").
#    - MRPT_VERSION_{MAJOR,MINOR,PATCH}: 3 variables for the version parts
#
#   Optional input variables:
#    - (Windows only) MRPT_DONT_USE_DBG_LIBS: If defined at input, before the
#         "FIND_PACKAGE(MRPT...)", and set to "1", will not search for `-dbg`
#         libraries when linking in "Debug" CMake builds.
#
# =========================================================================

# MRPT version numbers:
SET(MRPT_VERSION @CMAKE_MRPT_FULL_VERSION@)
SET(MRPT_VERSION_MAJOR @CMAKE_MRPT_VERSION_NUMBER_MAJOR@)
SET(MRPT_VERSION_MINOR @CMAKE_MRPT_VERSION_NUMBER_MINOR@)
SET(MRPT_VERSION_PATCH @CMAKE_MRPT_VERSION_NUMBER_PATCH@)

# Require C++17
if (MSVC)
	add_compile_options("/std:c++latest")
else()
	if(${CMAKE_VERSION} VERSION_LESS "3.8.0")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
		unset(CMAKE_CXX_STANDARD) # Required not to override the flag above to c++14 or lower
	else()
		if ("${CMAKE_CXX_STANDARD}" STREQUAL "" OR "${CMAKE_CXX_STANDARD}" LESS 17)
			set(CMAKE_CXX_STANDARD 17)
		endif()
	endif()
endif()

# missing math consts (M_PI) in msvc:
IF(MSVC)
	ADD_DEFINITIONS(-D_USE_MATH_DEFINES)
ENDIF()

# Extract the directory where *this* file has been installed (determined at cmake run-time)
get_filename_component(THIS_MRPT_CONFIG_PATH "${CMAKE_CURRENT_LIST_FILE}" PATH)

# MRPT source dir
SET(MRPT_SOURCE_DIR "@THE_MRPT_SOURCE_DIR@")
SET(MRPT_LIBS_INCL_DIR "@THE_MRPT_LIBS_INCL_DIR@")

# MRPT binary dir
SET(MRPT_DIR "@THE_CMAKE_BINARY_DIR@")

# MRPT include directory for "config.h"
SET(MRPT_CONFIG_DIR "@THE_MRPT_CONFIG_FILE_INCLUDE_DIR@")

#MESSAGE(STATUS "MRPT_FIND_COMPONENTS: ${MRPT_FIND_COMPONENTS}")

# MRPT include directories
SET(MRPT_INCLUDE_DIRS "@THE_INCLUDE_DIRECTORIES@")

# MRPT library directories
SET(MRPT_LINK_DIRECTORIES "@THE_LINK_DIRECTORIES@")

# ======================================================
# Include directories where Eigen3 headers are... if
#  they are not embedded under mrpt-base headers:
# ======================================================
IF (NOT @MRPT_CONFIGFILE_IS_INSTALL@ OR NOT @EIGEN_USE_EMBEDDED_VERSION_BOOL@)
	INCLUDE_DIRECTORIES("@MRPT_EIGEN_INCLUDE_DIR@")
	LIST(APPEND MRPT_INCLUDE_DIRS "@MRPT_EIGEN_INCLUDE_DIR@")
ENDIF ()

# If using GCC and -Wall, eigen3 headers raise some warnings: silent them:
IF(CMAKE_COMPILER_IS_GNUCXX)
	add_compile_options(-Wno-long-long -Wno-variadic-macros)
	# Workaround: Eigen <3.4 produces *tons* of warnings in GCC >=6. See http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1221
	IF (NOT ${CMAKE_CXX_COMPILER_VERSION} LESS "6.0")
		add_compile_options(-Wno-ignored-attributes -Wno-int-in-bool-context)
	ENDIF()
ENDIF()

# ======================================================
# Include directories to add to the user project:
# ======================================================
INCLUDE_DIRECTORIES(${MRPT_CONFIG_DIR})
LIST(APPEND MRPT_INCLUDE_DIRS ${MRPT_CONFIG_DIR})

# OpenCV library:
IF(@CMAKE_MRPT_HAS_OPENCV_SYSTEM@)    # CMAKE_MRPT_HAS_OPENCV_SYSTEM
	# Using system opencv lib:
	# Users must link against OpenCV only if MRPT is not a dynamic library:
	IF (NOT @CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF@)  # CMAKE_MRPT_BUILD_SHARED_LIB
		LINK_DIRECTORIES("@OPENCV_LIBDIR@")  # OPENCV_LIBDIR
		LIST(APPEND MRPT_LINK_DIRECTORIES "@OPENCV_LIBDIR@")
	ENDIF ()
ENDIF()

# Suitesparse lib (only if present as a system lib)
IF(@CMAKE_MRPT_HAS_SUITESPARSE_SYSTEM@)    # CMAKE_MRPT_HAS_SUITESPARSE_SYSTEM
	INCLUDE_DIRECTORIES("@SuiteSparse_INCLUDE_DIRS@") # SuiteSparse_INCLUDE_DIRS
	LIST(APPEND MRPT_INCLUDE_DIRS "@SuiteSparse_INCLUDE_DIRS@")
ENDIF()



# ==========================================================
# Default "MRPT_FIND_COMPONENTS" -> "slam" + "topography",
#  for backward compatibility (< MRPT 0.9.0)
# ==========================================================
IF ("${MRPT_FIND_COMPONENTS}" STREQUAL "")
	SET(MRPT_FIND_COMPONENTS slam topography)
ENDIF ()

# ======================================================
# The list of MRPT libs/modules in this build
# ======================================================
SET(ALL_MRPT_LIBS "@ALL_MRPT_LIBS@")
#  Start of DECLARE_LIBS_DEPS
@DECLARE_LIBS_DEPS@
#  End of DECLARE_LIBS_DEPS

#  Start of DECLARE_LIBS_HDR_ONLY
@DECLARE_LIBS_HDR_ONLY@
#  End of DECLARE_LIBS_HDR_ONLY

# Add hierarchical dependencies of MRPT libraries,
#  and replace "core"->"mrpt-core", etc.
# ================================================
SET(FINAL_LIST_COMPONENTS "")
FOREACH(iter RANGE 1 12) # repeat to get depedencies recursively
	FOREACH(_MOD ${MRPT_FIND_COMPONENTS})
		STRING(TOLOWER ${_MOD} _MOD)
		STRING(REGEX REPLACE "mrpt-(.*)" "\\1" _MOD ${_MOD})
		SET(_NAM "mrpt-${_MOD}")
		LIST(APPEND FINAL_LIST_COMPONENTS ${_NAM})
		get_property(_LIB_DEP GLOBAL PROPERTY "${_NAM}_LIB_DEPS")
		# Add deps:
		IF (NOT "${_LIB_DEP}" STREQUAL "")
			LIST(APPEND FINAL_LIST_COMPONENTS ${_LIB_DEP})
		ENDIF ()
	ENDFOREACH()
	SET(MRPT_FIND_COMPONENTS ${FINAL_LIST_COMPONENTS})
	list(REMOVE_DUPLICATES MRPT_FIND_COMPONENTS)
ENDFOREACH()

# ======================================================
# Check:
#  All libraries must exist in the MRPT build.
#  Compare "MRPT_FIND_COMPONENTS" against "ALL_MRPT_LIBS":
# ======================================================
#MESSAGE(STATUS "LIBS: ${ALL_MRPT_LIBS}")
FOREACH(MRPTLIB ${MRPT_FIND_COMPONENTS})
	list(FIND ALL_MRPT_LIBS "${MRPTLIB}" _LIB_IDX)
	IF (_LIB_IDX EQUAL -1)
		MESSAGE(FATAL_ERROR "ERROR: MRPT_FIND_COMPONENTS contains '${MRPTLIB}', not built in mrpt (built ones: ${ALL_MRPT_LIBS})")
	ENDIF ()
ENDFOREACH()
#MESSAGE(STATUS "MRPT_FIND_COMPONENTS: ${MRPT_FIND_COMPONENTS}")


# ======================================================
#   MRPT list of libraries the user should link against:
# ======================================================
SET(MRPT_LIBRARIES "@MRPT_LINKER_LIBS@")

SET(MRPT_COMP_HWDRIVERS 0  INTERNAL)
# Process the list:
FOREACH(MRPTLIB ${MRPT_FIND_COMPONENTS})
	STRING(TOLOWER ${MRPTLIB} MRPTLIB)
	STRING(REGEX REPLACE "mrpt-(.*)" "\\1" MRPTLIB ${MRPTLIB})

	# The include dir:
	INCLUDE_DIRECTORIES("${MRPT_LIBS_INCL_DIR}/${MRPTLIB}/include")
	LIST(APPEND MRPT_INCLUDE_DIRS "${MRPT_LIBS_INCL_DIR}/${MRPTLIB}/include")

	# List of libs to link against:
	# If the required lib is header-only, don't add to the list of libs to link!
	get_property(_LIB_HDRONLY GLOBAL PROPERTY "mrpt-${MRPTLIB}_LIB_IS_HEADERS_ONLY")
	IF(NOT _LIB_HDRONLY)
		IF(WIN32 AND NOT MRPT_DONT_USE_DBG_LIBS)
			LIST(APPEND MRPT_LIBRARIES
				optimized @MRPT_LIB_PREFIX@mrpt-${MRPTLIB}@MRPT_DLL_VERSION_POSTFIX@
				debug     @MRPT_LIB_PREFIX@mrpt-${MRPTLIB}@MRPT_DLL_VERSION_POSTFIX@@CMAKE_DEBUG_POSTFIX@)
		ELSE()
			LIST(APPEND MRPT_LIBRARIES  @MRPT_LIB_PREFIX@mrpt-${MRPTLIB}@MRPT_DLL_VERSION_POSTFIX@)
		ENDIF()
	ENDIF()

	IF(MRPTLIB MATCHES "hwdrivers")
		SET(MRPT_COMP_HWDRIVERS 1)
	ENDIF()
ENDFOREACH()

# Handle special cases:
# libs for ffmpeg in win32 (only if building static libs)
IF(MRPT_COMP_HWDRIVERS AND NOT @CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF@)
	IF(@MRPT_HAS_FFMPEG_WIN32@ MATCHES "ON")  # MRPT_HAS_FFMPEG_WIN32
		FOREACH(FFMPGLIB "@MRPT_FFMPEG_LIBS_TO_LINK@")
			LIST(APPEND MRPT_LIBRARIES general "${FFMPGLIB}")
		ENDFOREACH()
	ENDIF()
ENDIF()

# ======================================================
# Support for wxWidgets: We only need wx libs at user
#  link time if MRPT libs are static.
# ======================================================
IF(@CMAKE_MRPT_HAS_WXWIDGETS@ AND NOT @CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF@)  # CMAKE_MRPT_HAS_WXWIDGETS AND NOT CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF
	SET(wxWidgets_USE_LIBS base core gl adv aui)

	IF(CMAKE_BUILD_TYPE MATCHES "Debug")
		SET(wxWidgets_USE_DEBUG "ON")
	ELSE()
		SET(wxWidgets_USE_REL_AND_DBG "ON")
	ENDIF()

	FIND_PACKAGE(wxWidgets)
	IF(wxWidgets_FOUND)
		# Include wxWidgets macros
		INCLUDE(${wxWidgets_USE_FILE})
		# ${wxWidgets_LIBRARIES}  will contain the libraries that should be added through TARGET_LINK_LIBRARIES(...)
		LINK_DIRECTORIES(${wxWidgets_LIBRARY_DIRS})
		LIST(APPEND MRPT_LINK_DIRECTORIES ${wxWidgets_LIBRARY_DIRS})

		IF(MSVC)
			ADD_DEFINITIONS(-DwxUSE_NO_MANIFEST=1)
		ENDIF()

		LIST(APPEND MRPT_LIBRARIES ${wxWidgets_LIBRARIES})
		IF(MSVC)
			ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
		ENDIF()
	ELSE()
		MESSAGE("Warning: MRPT was compiled with wxWidgets, but CMake is not able to locate wxWidgets automatically. Please, set wxWidgets_ROOT_DIR to the lib directory manually.\n You can safely ignore this warning if you don't intend to use MRPT GUI classes or wxWidgets directly from your application.")
	ENDIF()
ENDIF()

# ======================================================
# Support for Bumblebee
# ======================================================
IF(WIN32 AND NOT @CMAKE_MRPT_BUILD_SHARED_LIB_ONOFF@)
	IF(@CMAKE_MRPT_HAS_BUMBLEBEE@)   # CMAKE_MRPT_HAS_BUMBLEBEE
		LINK_DIRECTORIES("@BUMBLEBEE_PGR_FLYCAPTURE_ROOT_DIR@/lib")
		LINK_DIRECTORIES("@BUMBLEBEE_TRICLOPS_ROOT_DIR@/lib")
		LIST(APPEND MRPT_LINK_DIRECTORIES "@BUMBLEBEE_PGR_FLYCAPTURE_ROOT_DIR@/lib")
		LIST(APPEND MRPT_LINK_DIRECTORIES "@BUMBLEBEE_TRICLOPS_ROOT_DIR@/lib")
	ENDIF()
ENDIF()

# ======================================================
# Link directories to add to the user project:
# ======================================================
LIST(APPEND MRPT_LINK_DIRECTORIES ${MRPT_DIR}/lib)
LINK_DIRECTORIES(${MRPT_LINK_DIRECTORIES})

SET(MRPT_LIBS ${MRPT_LIBRARIES}) # For backward compatible code
