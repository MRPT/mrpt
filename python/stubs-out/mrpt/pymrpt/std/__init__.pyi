from typing import Any, Iterator

from typing import overload

class array_mrpt_img_CImage_6UL_t:
    @overload
    def __init__(self, arg0: array_mrpt_img_CImage_6UL_t) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def assign(self) -> array_mrpt_img_CImage_6UL_t: ...
    def at(self, *args, **kwargs) -> Any: ...
    def back(self, *args, **kwargs) -> Any: ...
    def begin(self, *args, **kwargs) -> Any: ...
    def cbegin(self, *args, **kwargs) -> Any: ...
    def cend(self, *args, **kwargs) -> Any: ...
    def data(self, *args, **kwargs) -> Any: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def end(self, *args, **kwargs) -> Any: ...
    @overload
    def fill(self, __u) -> None: ...
    @overload
    def fill(constclassmrpt) -> void: ...
    def front(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    def swap(self, __other: array_mrpt_img_CImage_6UL_t) -> None: ...
    def __getitem__(self, index) -> Any: ...

class deque_mrpt_bayes_CProbabilityParticle_mrpt_maps_CRBPFParticleData_mrpt_bayes_particle_storage_mode_POINTER_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __n: int) -> None: ...
    @overload
    def __init__(self, arg0: deque_mrpt_bayes_CProbabilityParticle_mrpt_maps_CRBPFParticleData_mrpt_bayes_particle_storage_mode_POINTER_t) -> None: ...
    def assign(self, __x: deque_mrpt_bayes_CProbabilityParticle_mrpt_maps_CRBPFParticleData_mrpt_bayes_particle_storage_mode_POINTER_t) -> deque_mrpt_bayes_CProbabilityParticle_mrpt_maps_CRBPFParticleData_mrpt_bayes_particle_storage_mode_POINTER_t: ...
    def at(self, *args, **kwargs) -> Any: ...
    def back(self, *args, **kwargs) -> Any: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def front(self, *args, **kwargs) -> Any: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def pop_back(self) -> None: ...
    @overload
    def pop_back() -> void: ...
    @overload
    def pop_front(self) -> None: ...
    @overload
    def pop_front() -> void: ...
    @overload
    def resize(self, __new_size: int) -> None: ...
    @overload
    def resize(size_t) -> void: ...
    @overload
    def shrink_to_fit(self) -> None: ...
    @overload
    def shrink_to_fit() -> void: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    @overload
    def swap(self, __x: deque_mrpt_bayes_CProbabilityParticle_mrpt_maps_CRBPFParticleData_mrpt_bayes_particle_storage_mode_POINTER_t) -> None: ...
    @overload
    def swap(classstd, mrpt) -> void: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Iterator: ...

class deque_mrpt_bayes_CProbabilityParticle_mrpt_math_TPose2D_mrpt_bayes_particle_storage_mode_VALUE_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __n: int) -> None: ...
    @overload
    def __init__(self, arg0: deque_mrpt_bayes_CProbabilityParticle_mrpt_math_TPose2D_mrpt_bayes_particle_storage_mode_VALUE_t) -> None: ...
    @overload
    def assign(self, __x: deque_mrpt_bayes_CProbabilityParticle_mrpt_math_TPose2D_mrpt_bayes_particle_storage_mode_VALUE_t) -> deque_mrpt_bayes_CProbabilityParticle_mrpt_math_TPose2D_mrpt_bayes_particle_storage_mode_VALUE_t: ...
    @overload
    def assign(size_t, conststructmrpt, mrpt) -> void: ...
    def at(self, *args, **kwargs) -> Any: ...
    def back(self, *args, **kwargs) -> Any: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def front(self, *args, **kwargs) -> Any: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def pop_back(self) -> None: ...
    @overload
    def pop_back() -> void: ...
    @overload
    def pop_front(self) -> None: ...
    @overload
    def pop_front() -> void: ...
    def push_back(self, conststructmrpt, mrpt) -> void: ...
    def push_front(self, conststructmrpt, mrpt) -> void: ...
    @overload
    def resize(self, __new_size: int) -> None: ...
    @overload
    def resize(size_t) -> void: ...
    @overload
    def resize(size_t, conststructmrpt, mrpt) -> void: ...
    @overload
    def shrink_to_fit(self) -> None: ...
    @overload
    def shrink_to_fit() -> void: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    @overload
    def swap(self, __x: deque_mrpt_bayes_CProbabilityParticle_mrpt_math_TPose2D_mrpt_bayes_particle_storage_mode_VALUE_t) -> None: ...
    @overload
    def swap(classstd, mrpt) -> void: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Iterator: ...

class deque_mrpt_bayes_CProbabilityParticle_mrpt_math_TPose3D_mrpt_bayes_particle_storage_mode_VALUE_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __n: int) -> None: ...
    @overload
    def __init__(self, arg0: deque_mrpt_bayes_CProbabilityParticle_mrpt_math_TPose3D_mrpt_bayes_particle_storage_mode_VALUE_t) -> None: ...
    @overload
    def assign(self, __x: deque_mrpt_bayes_CProbabilityParticle_mrpt_math_TPose3D_mrpt_bayes_particle_storage_mode_VALUE_t) -> deque_mrpt_bayes_CProbabilityParticle_mrpt_math_TPose3D_mrpt_bayes_particle_storage_mode_VALUE_t: ...
    @overload
    def assign(size_t, conststructmrpt, mrpt) -> void: ...
    def at(self, *args, **kwargs) -> Any: ...
    def back(self, *args, **kwargs) -> Any: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def front(self, *args, **kwargs) -> Any: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def pop_back(self) -> None: ...
    @overload
    def pop_back() -> void: ...
    @overload
    def pop_front(self) -> None: ...
    @overload
    def pop_front() -> void: ...
    def push_back(self, conststructmrpt, mrpt) -> void: ...
    def push_front(self, conststructmrpt, mrpt) -> void: ...
    @overload
    def resize(self, __new_size: int) -> None: ...
    @overload
    def resize(size_t) -> void: ...
    @overload
    def resize(size_t, conststructmrpt, mrpt) -> void: ...
    @overload
    def shrink_to_fit(self) -> None: ...
    @overload
    def shrink_to_fit() -> void: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    @overload
    def swap(self, __x: deque_mrpt_bayes_CProbabilityParticle_mrpt_math_TPose3D_mrpt_bayes_particle_storage_mode_VALUE_t) -> None: ...
    @overload
    def swap(classstd, mrpt) -> void: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Iterator: ...

class deque_mrpt_math_TPose3D_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a) -> None: ...
    @overload
    def __init__(self, __n: int) -> None: ...
    @overload
    def __init__(self, __n: int, __a) -> None: ...
    @overload
    def __init__(self, __n: int, __value) -> None: ...
    @overload
    def __init__(self, __n: int, __value, __a) -> None: ...
    @overload
    def __init__(self, arg0: deque_mrpt_math_TPose3D_t) -> None: ...
    @overload
    def __init__(self, __x: deque_mrpt_math_TPose3D_t, __a) -> None: ...
    @overload
    def assign(self, __x: deque_mrpt_math_TPose3D_t) -> deque_mrpt_math_TPose3D_t: ...
    @overload
    def assign(self, __n: int, __val) -> None: ...
    @overload
    def assign(size_t, conststructmrpt) -> void: ...
    def at(self, *args, **kwargs) -> Any: ...
    def back(self, *args, **kwargs) -> Any: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def front(self, *args, **kwargs) -> Any: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def pop_back(self) -> None: ...
    @overload
    def pop_back() -> void: ...
    @overload
    def pop_front(self) -> None: ...
    @overload
    def pop_front() -> void: ...
    @overload
    def push_back(self, __x) -> None: ...
    @overload
    def push_back(conststructmrpt) -> void: ...
    @overload
    def push_front(self, __x) -> None: ...
    @overload
    def push_front(conststructmrpt) -> void: ...
    @overload
    def resize(self, __new_size: int) -> None: ...
    @overload
    def resize(size_t) -> void: ...
    @overload
    def resize(self, __new_size: int, __x) -> None: ...
    @overload
    def resize(size_t, conststructmrpt) -> void: ...
    @overload
    def shrink_to_fit(self) -> None: ...
    @overload
    def shrink_to_fit() -> void: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    @overload
    def swap(self, __x: deque_mrpt_math_TPose3D_t) -> None: ...
    @overload
    def swap(classstd) -> void: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Iterator: ...

class deque_mrpt_system_CDirectoryExplorer_TFileInfo_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __a) -> None: ...
    @overload
    def __init__(self, __n: int) -> None: ...
    @overload
    def __init__(self, __n: int, __a) -> None: ...
    @overload
    def __init__(self, __n: int, __value) -> None: ...
    @overload
    def __init__(self, __n: int, __value, __a) -> None: ...
    @overload
    def __init__(self, arg0: deque_mrpt_system_CDirectoryExplorer_TFileInfo_t) -> None: ...
    @overload
    def __init__(self, __x: deque_mrpt_system_CDirectoryExplorer_TFileInfo_t, __a) -> None: ...
    @overload
    def assign(self, __x: deque_mrpt_system_CDirectoryExplorer_TFileInfo_t) -> deque_mrpt_system_CDirectoryExplorer_TFileInfo_t: ...
    @overload
    def assign(self, __n: int, __val) -> None: ...
    @overload
    def assign(size_t, conststructmrpt) -> void: ...
    def at(self, *args, **kwargs) -> Any: ...
    def back(self, *args, **kwargs) -> Any: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def front(self, *args, **kwargs) -> Any: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def pop_back(self) -> None: ...
    @overload
    def pop_back() -> void: ...
    @overload
    def pop_front(self) -> None: ...
    @overload
    def pop_front() -> void: ...
    @overload
    def push_back(self, __x) -> None: ...
    @overload
    def push_back(conststructmrpt) -> void: ...
    @overload
    def push_front(self, __x) -> None: ...
    @overload
    def push_front(conststructmrpt) -> void: ...
    @overload
    def resize(self, __new_size: int) -> None: ...
    @overload
    def resize(size_t) -> void: ...
    @overload
    def resize(self, __new_size: int, __x) -> None: ...
    @overload
    def resize(size_t, conststructmrpt) -> void: ...
    @overload
    def shrink_to_fit(self) -> None: ...
    @overload
    def shrink_to_fit() -> void: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    @overload
    def swap(self, __x: deque_mrpt_system_CDirectoryExplorer_TFileInfo_t) -> None: ...
    @overload
    def swap(classstd) -> void: ...
    def __getitem__(self, index) -> Any: ...

class map_double_double_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __comp) -> None: ...
    @overload
    def __init__(self, arg0: map_double_double_t) -> None: ...
    def assign(self) -> map_double_double_t: ...
    def at(self, __k: float) -> float: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    def count(self, __x: float) -> int: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def equal_range(self, *args, **kwargs) -> Any: ...
    def erase(self, __x: float) -> int: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    def insert(self, *args, **kwargs) -> Any: ...
    def key_comp(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    def swap(self, __x: map_double_double_t) -> None: ...
    def __getitem__(self, __k: float) -> float: ...

class map_mrpt_containers_yaml_node_t_mrpt_containers_yaml_node_t_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __comp) -> None: ...
    @overload
    def __init__(self, __comp, __a, mrpt) -> None: ...
    @overload
    def __init__(self, arg0: map_mrpt_containers_yaml_node_t_mrpt_containers_yaml_node_t_t) -> None: ...
    @overload
    def __init__(self, __a, mrpt) -> None: ...
    @overload
    def __init__(self, __m: map_mrpt_containers_yaml_node_t_mrpt_containers_yaml_node_t_t, __a, mrpt) -> None: ...
    def assign(self) -> map_mrpt_containers_yaml_node_t_mrpt_containers_yaml_node_t_t: ...
    def at(self, *args, **kwargs) -> Any: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    @overload
    def count(self, __x) -> int: ...
    @overload
    def count(conststructmrpt) -> size_t: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def equal_range(self, *args, **kwargs) -> Any: ...
    @overload
    def erase(self, __x) -> int: ...
    @overload
    def erase(conststructmrpt) -> size_t: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    def insert(self, *args, **kwargs) -> Any: ...
    def key_comp(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    @overload
    def swap(self, __x: map_mrpt_containers_yaml_node_t_mrpt_containers_yaml_node_t_t) -> None: ...
    @overload
    def swap(classstd, structmrpt) -> void: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Iterator: ...

class map_std_string_double_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: map_std_string_double_t) -> None: ...
    def assign(self) -> map_std_string_double_t: ...
    def at(self, __k: str) -> float: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    @overload
    def count(self, __x: str) -> int: ...
    @overload
    def count(conststd) -> size_t: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def equal_range(self, *args, **kwargs) -> Any: ...
    @overload
    def erase(self, __x: str) -> int: ...
    @overload
    def erase(conststd) -> size_t: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    def insert(self, *args, **kwargs) -> Any: ...
    def key_comp(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    def swap(self, __x: map_std_string_double_t) -> None: ...
    def __getitem__(self, __k: str) -> float: ...

class map_std_string_mrpt_poses_CPose3D_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: map_std_string_mrpt_poses_CPose3D_t) -> None: ...
    def assign(self) -> map_std_string_mrpt_poses_CPose3D_t: ...
    def at(self, *args, **kwargs) -> Any: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    @overload
    def count(self, __x: str) -> int: ...
    @overload
    def count(conststd) -> size_t: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def equal_range(self, *args, **kwargs) -> Any: ...
    @overload
    def erase(self, __x: str) -> int: ...
    @overload
    def erase(conststd) -> size_t: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    def insert(self, *args, **kwargs) -> Any: ...
    def key_comp(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    @overload
    def swap(self, __x: map_std_string_mrpt_poses_CPose3D_t) -> None: ...
    @overload
    def swap(classstd, classmrpt) -> void: ...
    def __getitem__(self, index) -> Any: ...

class map_std_string_std_string_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: map_std_string_std_string_t) -> None: ...
    def assign(self) -> map_std_string_std_string_t: ...
    def at(self, __k: str) -> str: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    @overload
    def count(self, __x: str) -> int: ...
    @overload
    def count(conststd) -> size_t: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def equal_range(self, *args, **kwargs) -> Any: ...
    @overload
    def erase(self, __x: str) -> int: ...
    @overload
    def erase(conststd) -> size_t: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    def insert(self, *args, **kwargs) -> Any: ...
    def key_comp(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    @overload
    def swap(self, __x: map_std_string_std_string_t) -> None: ...
    @overload
    def swap(classstd, std) -> void: ...
    def __getitem__(self, __k: str) -> str: ...

class multimap_std_chrono_time_point_mrpt_Clock_std_chrono_duration_long_std_ratio_1_10000000_std_shared_ptr_mrpt_serialization_CSerializable_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: multimap_std_chrono_time_point_mrpt_Clock_std_chrono_duration_long_std_ratio_1_10000000_std_shared_ptr_mrpt_serialization_CSerializable_t) -> None: ...
    def assign(self) -> multimap_std_chrono_time_point_mrpt_Clock_std_chrono_duration_long_std_ratio_1_10000000_std_shared_ptr_mrpt_serialization_CSerializable_t: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    @overload
    def count(self, __x: chrono.time_point_mrpt_Clock_std_chrono_duration_long_std_ratio_1_10000000_t) -> int: ...
    @overload
    def count(constmrpt) -> size_t: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def equal_range(self, *args, **kwargs) -> Any: ...
    @overload
    def erase(self, __x: chrono.time_point_mrpt_Clock_std_chrono_duration_long_std_ratio_1_10000000_t) -> int: ...
    @overload
    def erase(constmrpt) -> size_t: ...
    def get_allocator(self, *args, **kwargs) -> Any: ...
    def key_comp(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    def swap(self, __x: multimap_std_chrono_time_point_mrpt_Clock_std_chrono_duration_long_std_ratio_1_10000000_std_shared_ptr_mrpt_serialization_CSerializable_t) -> None: ...
    def __iter__(self) -> Iterator: ...

class vector_std_string_t:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __n: int) -> None: ...
    @overload
    def __init__(self, __n: int, __value: str) -> None: ...
    @overload
    def __init__(self, arg0: vector_std_string_t) -> None: ...
    @overload
    def assign(self, __x: vector_std_string_t) -> vector_std_string_t: ...
    @overload
    def assign(self, __n: int, __val: str) -> None: ...
    @overload
    def assign(size_t, conststd) -> void: ...
    def at(self, __n: int) -> str: ...
    def back(self) -> str: ...
    def begin(self, *args, **kwargs) -> Any: ...
    @overload
    def capacity(self) -> int: ...
    @overload
    def capacity() -> size_t: ...
    def cbegin(self, *args, **kwargs) -> Any: ...
    def cend(self, *args, **kwargs) -> Any: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear() -> void: ...
    def data(self) -> str: ...
    @overload
    def empty(self) -> bool: ...
    @overload
    def empty() -> bool: ...
    def end(self, *args, **kwargs) -> Any: ...
    def erase(self, *args, **kwargs) -> Any: ...
    def front(self) -> str: ...
    def insert(self, *args, **kwargs) -> Any: ...
    @overload
    def max_size(self) -> int: ...
    @overload
    def max_size() -> size_t: ...
    @overload
    def pop_back(self) -> None: ...
    @overload
    def pop_back() -> void: ...
    @overload
    def push_back(self, __x: str) -> None: ...
    @overload
    def push_back(conststd) -> void: ...
    @overload
    def reserve(self, __n: int) -> None: ...
    @overload
    def reserve(size_t) -> void: ...
    @overload
    def resize(self, __new_size: int) -> None: ...
    @overload
    def resize(size_t) -> void: ...
    @overload
    def resize(self, __new_size: int, __x: str) -> None: ...
    @overload
    def resize(size_t, conststd) -> void: ...
    @overload
    def shrink_to_fit(self) -> None: ...
    @overload
    def shrink_to_fit() -> void: ...
    @overload
    def size(self) -> int: ...
    @overload
    def size() -> size_t: ...
    @overload
    def swap(self, __x: vector_std_string_t) -> None: ...
    @overload
    def swap(classstd) -> void: ...
    def __getitem__(self, __n: int) -> str: ...
    def __iter__(self) -> Iterator: ...
