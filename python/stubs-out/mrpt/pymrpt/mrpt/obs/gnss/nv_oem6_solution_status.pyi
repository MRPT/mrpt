from typing import ClassVar

COLD_START: nv_solution_status_t
COV_TRACE: nv_solution_status_t
DELTA_POS: nv_solution_status_t
IMU_UNPLUGGED: nv_solution_status_t
INSUFFICIENT_OBS: nv_solution_status_t
INS_ALIGNING: nv_solution_status_t
INS_BAD: nv_solution_status_t
INS_INACTIVE: nv_solution_status_t
INTEGRITY_WARNING: nv_solution_status_t
INVALID_FIX: nv_solution_status_t
NEGATIVE_VAR: nv_solution_status_t
NO_CONVERGENCE: nv_solution_status_t
PENDING: nv_solution_status_t
RESIDUALS: nv_solution_status_t
SINGULARITY: nv_solution_status_t
SOL_COMPUTED: nv_solution_status_t
TEST_DIST: nv_solution_status_t
VARIANCE: nv_solution_status_t
V_H_LIMIT: nv_solution_status_t

class nv_solution_status_t:
    __doc__: ClassVar[str] = ...  # read-only
    __members__: ClassVar[dict] = ...  # read-only
    COLD_START: ClassVar[nv_solution_status_t] = ...
    COV_TRACE: ClassVar[nv_solution_status_t] = ...
    DELTA_POS: ClassVar[nv_solution_status_t] = ...
    IMU_UNPLUGGED: ClassVar[nv_solution_status_t] = ...
    INSUFFICIENT_OBS: ClassVar[nv_solution_status_t] = ...
    INS_ALIGNING: ClassVar[nv_solution_status_t] = ...
    INS_BAD: ClassVar[nv_solution_status_t] = ...
    INS_INACTIVE: ClassVar[nv_solution_status_t] = ...
    INTEGRITY_WARNING: ClassVar[nv_solution_status_t] = ...
    INVALID_FIX: ClassVar[nv_solution_status_t] = ...
    NEGATIVE_VAR: ClassVar[nv_solution_status_t] = ...
    NO_CONVERGENCE: ClassVar[nv_solution_status_t] = ...
    PENDING: ClassVar[nv_solution_status_t] = ...
    RESIDUALS: ClassVar[nv_solution_status_t] = ...
    SINGULARITY: ClassVar[nv_solution_status_t] = ...
    SOL_COMPUTED: ClassVar[nv_solution_status_t] = ...
    TEST_DIST: ClassVar[nv_solution_status_t] = ...
    VARIANCE: ClassVar[nv_solution_status_t] = ...
    V_H_LIMIT: ClassVar[nv_solution_status_t] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def enum2str(val: int) -> str: ...
