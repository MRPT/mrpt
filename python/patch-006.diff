diff --git a/python/src/std/stl_deque.cpp b/python/src/std/stl_deque.cpp
index 302018560..1638b4d29 100644
--- a/python/src/std/stl_deque.cpp
+++ b/python/src/std/stl_deque.cpp
@@ -28,26 +28,26 @@ void bind_std_stl_deque(std::function< pybind11::module &(std::string const &nam
 		cl.def( pybind11::init( [](){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>(); } ) );
 		cl.def( pybind11::init<const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>(a0); } ), "doc" , pybind11::arg("__n"));
-		cl.def( pybind11::init<unsigned long, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__n"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>(a0); } ), "doc" , pybind11::arg("__n"));
+		cl.def( pybind11::init<size_t, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__n"), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> & a1){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>(a0, a1); } ), "doc" , pybind11::arg("__n"), pybind11::arg("__value"));
-		cl.def( pybind11::init<unsigned long, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> & a1){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>(a0, a1); } ), "doc" , pybind11::arg("__n"), pybind11::arg("__value"));
+		cl.def( pybind11::init<size_t, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );
 
 		cl.def( pybind11::init( [](std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>> const &o){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>(o); } ) );
 		cl.def( pybind11::init<const class std::deque<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > &, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__x"), pybind11::arg("__a") );
 
 		cl.def("assign", (class std::deque<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(const class std::deque<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::operator=, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::operator=(const class std::deque<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > &) --> class std::deque<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
-		cl.def("assign", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(unsigned long, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::assign, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::assign(unsigned long, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
+		cl.def("assign", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(size_t, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::assign, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::assign(size_t, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
 		cl.def("get_allocator", (class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> > (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::get_allocator, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::get_allocator() const --> class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> >");
-		cl.def("size", (unsigned long (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::size() const --> unsigned long");
-		cl.def("max_size", (unsigned long (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::max_size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::max_size() const --> unsigned long");
-		cl.def("resize", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(unsigned long)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::resize, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::resize(unsigned long) --> void", pybind11::arg("__new_size"));
-		cl.def("resize", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(unsigned long, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::resize, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::resize(unsigned long, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
+		cl.def("size", (size_t (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::size() const --> size_t");
+		cl.def("max_size", (size_t (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::max_size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::max_size() const --> size_t");
+		cl.def("resize", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(size_t)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::resize, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::resize(size_t) --> void", pybind11::arg("__new_size"));
+		cl.def("resize", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(size_t, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::resize, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::resize(size_t, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
 		cl.def("shrink_to_fit", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)()) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::shrink_to_fit, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::shrink_to_fit() --> void");
 		cl.def("empty", (bool (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::empty, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::empty() const --> bool");
-		cl.def("__getitem__", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(unsigned long)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::operator[], "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::operator[](unsigned long) --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
-		cl.def("at", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(unsigned long)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::at, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::at(unsigned long) --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("__getitem__", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(size_t)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::operator[], "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::operator[](size_t) --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("at", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(size_t)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::at, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::at(size_t) --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
 		cl.def("front", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)()) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::front, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::front() --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic);
 		cl.def("back", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)()) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::back, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::back() --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic);
 		cl.def("push_front", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::push_front, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE>>::push_front(const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose3D, mrpt::bayes::particle_storage_mode::VALUE> &) --> void", pybind11::arg("__x"));
@@ -62,26 +62,26 @@ void bind_std_stl_deque(std::function< pybind11::module &(std::string const &nam
 		cl.def( pybind11::init( [](){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>(); } ) );
 		cl.def( pybind11::init<const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>(a0); } ), "doc" , pybind11::arg("__n"));
-		cl.def( pybind11::init<unsigned long, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__n"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>(a0); } ), "doc" , pybind11::arg("__n"));
+		cl.def( pybind11::init<size_t, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__n"), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> & a1){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>(a0, a1); } ), "doc" , pybind11::arg("__n"), pybind11::arg("__value"));
-		cl.def( pybind11::init<unsigned long, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> & a1){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>(a0, a1); } ), "doc" , pybind11::arg("__n"), pybind11::arg("__value"));
+		cl.def( pybind11::init<size_t, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );
 
 		cl.def( pybind11::init( [](std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>> const &o){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>(o); } ) );
 		cl.def( pybind11::init<const class std::deque<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > &, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > &>(), pybind11::arg("__x"), pybind11::arg("__a") );
 
 		cl.def("assign", (class std::deque<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(const class std::deque<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::operator=, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::operator=(const class std::deque<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > &) --> class std::deque<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
-		cl.def("assign", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(unsigned long, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::assign, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::assign(unsigned long, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
+		cl.def("assign", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(size_t, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::assign, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::assign(size_t, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
 		cl.def("get_allocator", (class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> > (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::get_allocator, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::get_allocator() const --> class std::allocator<struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> >");
-		cl.def("size", (unsigned long (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::size() const --> unsigned long");
-		cl.def("max_size", (unsigned long (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::max_size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::max_size() const --> unsigned long");
-		cl.def("resize", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(unsigned long)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::resize, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::resize(unsigned long) --> void", pybind11::arg("__new_size"));
-		cl.def("resize", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(unsigned long, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::resize, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::resize(unsigned long, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
+		cl.def("size", (size_t (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::size() const --> size_t");
+		cl.def("max_size", (size_t (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::max_size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::max_size() const --> size_t");
+		cl.def("resize", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(size_t)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::resize, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::resize(size_t) --> void", pybind11::arg("__new_size"));
+		cl.def("resize", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(size_t, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::resize, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::resize(size_t, const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
 		cl.def("shrink_to_fit", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)()) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::shrink_to_fit, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::shrink_to_fit() --> void");
 		cl.def("empty", (bool (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::empty, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::empty() const --> bool");
-		cl.def("__getitem__", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(unsigned long)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::operator[], "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::operator[](unsigned long) --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
-		cl.def("at", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(unsigned long)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::at, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::at(unsigned long) --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("__getitem__", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(size_t)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::operator[], "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::operator[](size_t) --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("at", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(size_t)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::at, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::at(size_t) --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
 		cl.def("front", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)()) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::front, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::front() --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic);
 		cl.def("back", (struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)()) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::back, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::back() --> struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &", pybind11::return_value_policy::automatic);
 		cl.def("push_front", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::*)(const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::push_front, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE>>::push_front(const struct mrpt::bayes::CProbabilityParticle<struct mrpt::math::TPose2D, mrpt::bayes::particle_storage_mode::VALUE> &) --> void", pybind11::arg("__x"));
diff --git a/python/src/std/stl_map.cpp b/python/src/std/stl_map.cpp
index 793bf72f3..eb2b18335 100644
--- a/python/src/std/stl_map.cpp
+++ b/python/src/std/stl_map.cpp
@@ -55,16 +55,16 @@ void bind_std_stl_map(std::function< pybind11::module &(std::string const &names
 		cl.def("assign", (class std::map<std::string, std::string > & (std::map<std::string,std::string>::*)(const class std::map<std::string, std::string > &)) &std::map<std::string, std::string>::operator=, "C++: std::map<std::string, std::string>::operator=(const class std::map<std::string, std::string > &) --> class std::map<std::string, std::string > &", pybind11::return_value_policy::automatic, pybind11::arg(""));
 		cl.def("get_allocator", (class std::allocator<struct std::pair<const std::string, std::string > > (std::map<std::string,std::string>::*)() const) &std::map<std::string, std::string>::get_allocator, "C++: std::map<std::string, std::string>::get_allocator() const --> class std::allocator<struct std::pair<const std::string, std::string > >");
 		cl.def("empty", (bool (std::map<std::string,std::string>::*)() const) &std::map<std::string, std::string>::empty, "C++: std::map<std::string, std::string>::empty() const --> bool");
-		cl.def("size", (unsigned long (std::map<std::string,std::string>::*)() const) &std::map<std::string, std::string>::size, "C++: std::map<std::string, std::string>::size() const --> unsigned long");
-		cl.def("max_size", (unsigned long (std::map<std::string,std::string>::*)() const) &std::map<std::string, std::string>::max_size, "C++: std::map<std::string, std::string>::max_size() const --> unsigned long");
+		cl.def("size", (size_t (std::map<std::string,std::string>::*)() const) &std::map<std::string, std::string>::size, "C++: std::map<std::string, std::string>::size() const --> size_t");
+		cl.def("max_size", (size_t (std::map<std::string,std::string>::*)() const) &std::map<std::string, std::string>::max_size, "C++: std::map<std::string, std::string>::max_size() const --> size_t");
 		cl.def("__getitem__", (std::string & (std::map<std::string,std::string>::*)(const std::string &)) &std::map<std::string, std::string>::operator[], "C++: std::map<std::string, std::string>::operator[](const std::string &) --> std::string &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
 		cl.def("at", (std::string & (std::map<std::string,std::string>::*)(const std::string &)) &std::map<std::string, std::string>::at, "C++: std::map<std::string, std::string>::at(const std::string &) --> std::string &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
 		cl.def("insert", (struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, std::string > >, bool> (std::map<std::string,std::string>::*)(const struct std::pair<const std::string, std::string > &)) &std::map<std::string, std::string>::insert, "C++: std::map<std::string, std::string>::insert(const struct std::pair<const std::string, std::string > &) --> struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, std::string > >, bool>", pybind11::arg("__x"));
-		cl.def("erase", (unsigned long (std::map<std::string,std::string>::*)(const std::string &)) &std::map<std::string, std::string>::erase, "C++: std::map<std::string, std::string>::erase(const std::string &) --> unsigned long", pybind11::arg("__x"));
+		cl.def("erase", (size_t (std::map<std::string,std::string>::*)(const std::string &)) &std::map<std::string, std::string>::erase, "C++: std::map<std::string, std::string>::erase(const std::string &) --> size_t", pybind11::arg("__x"));
 		cl.def("swap", (void (std::map<std::string,std::string>::*)(class std::map<std::string, std::string > &)) &std::map<std::string, std::string>::swap, "C++: std::map<std::string, std::string>::swap(class std::map<std::string, std::string > &) --> void", pybind11::arg("__x"));
 		cl.def("clear", (void (std::map<std::string,std::string>::*)()) &std::map<std::string, std::string>::clear, "C++: std::map<std::string, std::string>::clear() --> void");
 		cl.def("key_comp", (struct std::less<std::string > (std::map<std::string,std::string>::*)() const) &std::map<std::string, std::string>::key_comp, "C++: std::map<std::string, std::string>::key_comp() const --> struct std::less<std::string >");
-		cl.def("count", (unsigned long (std::map<std::string,std::string>::*)(const std::string &) const) &std::map<std::string, std::string>::count, "C++: std::map<std::string, std::string>::count(const std::string &) const --> unsigned long", pybind11::arg("__x"));
+		cl.def("count", (size_t (std::map<std::string,std::string>::*)(const std::string &) const) &std::map<std::string, std::string>::count, "C++: std::map<std::string, std::string>::count(const std::string &) const --> size_t", pybind11::arg("__x"));
 		cl.def("equal_range", (struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, std::string > >, struct std::_Rb_tree_iterator<struct std::pair<const std::string, std::string > > > (std::map<std::string,std::string>::*)(const std::string &)) &std::map<std::string, std::string>::equal_range, "C++: std::map<std::string, std::string>::equal_range(const std::string &) --> struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, std::string > >, struct std::_Rb_tree_iterator<struct std::pair<const std::string, std::string > > >", pybind11::arg("__x"));
 	}
 	{ // std::map file:bits/stl_map.h line:100
@@ -81,16 +81,16 @@ void bind_std_stl_map(std::function< pybind11::module &(std::string const &names
 		cl.def("assign", (class std::map<std::string, double> & (std::map<std::string,double>::*)(const class std::map<std::string, double> &)) &std::map<std::string, double>::operator=, "C++: std::map<std::string, double>::operator=(const class std::map<std::string, double> &) --> class std::map<std::string, double> &", pybind11::return_value_policy::automatic, pybind11::arg(""));
 		cl.def("get_allocator", (class std::allocator<struct std::pair<const std::string, double> > (std::map<std::string,double>::*)() const) &std::map<std::string, double>::get_allocator, "C++: std::map<std::string, double>::get_allocator() const --> class std::allocator<struct std::pair<const std::string, double> >");
 		cl.def("empty", (bool (std::map<std::string,double>::*)() const) &std::map<std::string, double>::empty, "C++: std::map<std::string, double>::empty() const --> bool");
-		cl.def("size", (unsigned long (std::map<std::string,double>::*)() const) &std::map<std::string, double>::size, "C++: std::map<std::string, double>::size() const --> unsigned long");
-		cl.def("max_size", (unsigned long (std::map<std::string,double>::*)() const) &std::map<std::string, double>::max_size, "C++: std::map<std::string, double>::max_size() const --> unsigned long");
+		cl.def("size", (size_t (std::map<std::string,double>::*)() const) &std::map<std::string, double>::size, "C++: std::map<std::string, double>::size() const --> size_t");
+		cl.def("max_size", (size_t (std::map<std::string,double>::*)() const) &std::map<std::string, double>::max_size, "C++: std::map<std::string, double>::max_size() const --> size_t");
 		cl.def("__getitem__", (double & (std::map<std::string,double>::*)(const std::string &)) &std::map<std::string, double>::operator[], "C++: std::map<std::string, double>::operator[](const std::string &) --> double &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
 		cl.def("at", (double & (std::map<std::string,double>::*)(const std::string &)) &std::map<std::string, double>::at, "C++: std::map<std::string, double>::at(const std::string &) --> double &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
 		cl.def("insert", (struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, double> >, bool> (std::map<std::string,double>::*)(const struct std::pair<const std::string, double> &)) &std::map<std::string, double>::insert, "C++: std::map<std::string, double>::insert(const struct std::pair<const std::string, double> &) --> struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, double> >, bool>", pybind11::arg("__x"));
-		cl.def("erase", (unsigned long (std::map<std::string,double>::*)(const std::string &)) &std::map<std::string, double>::erase, "C++: std::map<std::string, double>::erase(const std::string &) --> unsigned long", pybind11::arg("__x"));
+		cl.def("erase", (size_t (std::map<std::string,double>::*)(const std::string &)) &std::map<std::string, double>::erase, "C++: std::map<std::string, double>::erase(const std::string &) --> size_t", pybind11::arg("__x"));
 		cl.def("swap", (void (std::map<std::string,double>::*)(class std::map<std::string, double> &)) &std::map<std::string, double>::swap, "C++: std::map<std::string, double>::swap(class std::map<std::string, double> &) --> void", pybind11::arg("__x"));
 		cl.def("clear", (void (std::map<std::string,double>::*)()) &std::map<std::string, double>::clear, "C++: std::map<std::string, double>::clear() --> void");
 		cl.def("key_comp", (struct std::less<std::string > (std::map<std::string,double>::*)() const) &std::map<std::string, double>::key_comp, "C++: std::map<std::string, double>::key_comp() const --> struct std::less<std::string >");
-		cl.def("count", (unsigned long (std::map<std::string,double>::*)(const std::string &) const) &std::map<std::string, double>::count, "C++: std::map<std::string, double>::count(const std::string &) const --> unsigned long", pybind11::arg("__x"));
+		cl.def("count", (size_t (std::map<std::string,double>::*)(const std::string &) const) &std::map<std::string, double>::count, "C++: std::map<std::string, double>::count(const std::string &) const --> size_t", pybind11::arg("__x"));
 		cl.def("equal_range", (struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, double> >, struct std::_Rb_tree_iterator<struct std::pair<const std::string, double> > > (std::map<std::string,double>::*)(const std::string &)) &std::map<std::string, double>::equal_range, "C++: std::map<std::string, double>::equal_range(const std::string &) --> struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, double> >, struct std::_Rb_tree_iterator<struct std::pair<const std::string, double> > >", pybind11::arg("__x"));
 	}
 	{ // std::map file:bits/stl_map.h line:100
@@ -107,16 +107,16 @@ void bind_std_stl_map(std::function< pybind11::module &(std::string const &names
 		cl.def("assign", (class std::map<double, double> & (std::map<double,double>::*)(const class std::map<double, double> &)) &std::map<double, double>::operator=, "C++: std::map<double, double>::operator=(const class std::map<double, double> &) --> class std::map<double, double> &", pybind11::return_value_policy::automatic, pybind11::arg(""));
 		cl.def("get_allocator", (class std::allocator<struct std::pair<const double, double> > (std::map<double,double>::*)() const) &std::map<double, double>::get_allocator, "C++: std::map<double, double>::get_allocator() const --> class std::allocator<struct std::pair<const double, double> >");
 		cl.def("empty", (bool (std::map<double,double>::*)() const) &std::map<double, double>::empty, "C++: std::map<double, double>::empty() const --> bool");
-		cl.def("size", (unsigned long (std::map<double,double>::*)() const) &std::map<double, double>::size, "C++: std::map<double, double>::size() const --> unsigned long");
-		cl.def("max_size", (unsigned long (std::map<double,double>::*)() const) &std::map<double, double>::max_size, "C++: std::map<double, double>::max_size() const --> unsigned long");
+		cl.def("size", (size_t (std::map<double,double>::*)() const) &std::map<double, double>::size, "C++: std::map<double, double>::size() const --> size_t");
+		cl.def("max_size", (size_t (std::map<double,double>::*)() const) &std::map<double, double>::max_size, "C++: std::map<double, double>::max_size() const --> size_t");
 		cl.def("__getitem__", (double & (std::map<double,double>::*)(const double &)) &std::map<double, double>::operator[], "C++: std::map<double, double>::operator[](const double &) --> double &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
 		cl.def("at", (double & (std::map<double,double>::*)(const double &)) &std::map<double, double>::at, "C++: std::map<double, double>::at(const double &) --> double &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
 		cl.def("insert", (struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const double, double> >, bool> (std::map<double,double>::*)(const struct std::pair<const double, double> &)) &std::map<double, double>::insert, "C++: std::map<double, double>::insert(const struct std::pair<const double, double> &) --> struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const double, double> >, bool>", pybind11::arg("__x"));
-		cl.def("erase", (unsigned long (std::map<double,double>::*)(const double &)) &std::map<double, double>::erase, "C++: std::map<double, double>::erase(const double &) --> unsigned long", pybind11::arg("__x"));
+		cl.def("erase", (size_t (std::map<double,double>::*)(const double &)) &std::map<double, double>::erase, "C++: std::map<double, double>::erase(const double &) --> size_t", pybind11::arg("__x"));
 		cl.def("swap", (void (std::map<double,double>::*)(class std::map<double, double> &)) &std::map<double, double>::swap, "C++: std::map<double, double>::swap(class std::map<double, double> &) --> void", pybind11::arg("__x"));
 		cl.def("clear", (void (std::map<double,double>::*)()) &std::map<double, double>::clear, "C++: std::map<double, double>::clear() --> void");
 		cl.def("key_comp", (struct std::less<double> (std::map<double,double>::*)() const) &std::map<double, double>::key_comp, "C++: std::map<double, double>::key_comp() const --> struct std::less<double>");
-		cl.def("count", (unsigned long (std::map<double,double>::*)(const double &) const) &std::map<double, double>::count, "C++: std::map<double, double>::count(const double &) const --> unsigned long", pybind11::arg("__x"));
+		cl.def("count", (size_t (std::map<double,double>::*)(const double &) const) &std::map<double, double>::count, "C++: std::map<double, double>::count(const double &) const --> size_t", pybind11::arg("__x"));
 		cl.def("equal_range", (struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const double, double> >, struct std::_Rb_tree_iterator<struct std::pair<const double, double> > > (std::map<double,double>::*)(const double &)) &std::map<double, double>::equal_range, "C++: std::map<double, double>::equal_range(const double &) --> struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const double, double> >, struct std::_Rb_tree_iterator<struct std::pair<const double, double> > >", pybind11::arg("__x"));
 	}
 	{ // std::map file:bits/stl_map.h line:100
@@ -133,16 +133,16 @@ void bind_std_stl_map(std::function< pybind11::module &(std::string const &names
 		cl.def("assign", (class std::map<std::string, class mrpt::poses::CPose3D> & (std::map<std::string,mrpt::poses::CPose3D>::*)(const class std::map<std::string, class mrpt::poses::CPose3D> &)) &std::map<std::string, mrpt::poses::CPose3D>::operator=, "C++: std::map<std::string, mrpt::poses::CPose3D>::operator=(const class std::map<std::string, class mrpt::poses::CPose3D> &) --> class std::map<std::string, class mrpt::poses::CPose3D> &", pybind11::return_value_policy::automatic, pybind11::arg(""));
 		cl.def("get_allocator", (class std::allocator<struct std::pair<const std::string, class mrpt::poses::CPose3D> > (std::map<std::string,mrpt::poses::CPose3D>::*)() const) &std::map<std::string, mrpt::poses::CPose3D>::get_allocator, "C++: std::map<std::string, mrpt::poses::CPose3D>::get_allocator() const --> class std::allocator<struct std::pair<const std::string, class mrpt::poses::CPose3D> >");
 		cl.def("empty", (bool (std::map<std::string,mrpt::poses::CPose3D>::*)() const) &std::map<std::string, mrpt::poses::CPose3D>::empty, "C++: std::map<std::string, mrpt::poses::CPose3D>::empty() const --> bool");
-		cl.def("size", (unsigned long (std::map<std::string,mrpt::poses::CPose3D>::*)() const) &std::map<std::string, mrpt::poses::CPose3D>::size, "C++: std::map<std::string, mrpt::poses::CPose3D>::size() const --> unsigned long");
-		cl.def("max_size", (unsigned long (std::map<std::string,mrpt::poses::CPose3D>::*)() const) &std::map<std::string, mrpt::poses::CPose3D>::max_size, "C++: std::map<std::string, mrpt::poses::CPose3D>::max_size() const --> unsigned long");
+		cl.def("size", (size_t (std::map<std::string,mrpt::poses::CPose3D>::*)() const) &std::map<std::string, mrpt::poses::CPose3D>::size, "C++: std::map<std::string, mrpt::poses::CPose3D>::size() const --> size_t");
+		cl.def("max_size", (size_t (std::map<std::string,mrpt::poses::CPose3D>::*)() const) &std::map<std::string, mrpt::poses::CPose3D>::max_size, "C++: std::map<std::string, mrpt::poses::CPose3D>::max_size() const --> size_t");
 		cl.def("__getitem__", (class mrpt::poses::CPose3D & (std::map<std::string,mrpt::poses::CPose3D>::*)(const std::string &)) &std::map<std::string, mrpt::poses::CPose3D>::operator[], "C++: std::map<std::string, mrpt::poses::CPose3D>::operator[](const std::string &) --> class mrpt::poses::CPose3D &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
 		cl.def("at", (class mrpt::poses::CPose3D & (std::map<std::string,mrpt::poses::CPose3D>::*)(const std::string &)) &std::map<std::string, mrpt::poses::CPose3D>::at, "C++: std::map<std::string, mrpt::poses::CPose3D>::at(const std::string &) --> class mrpt::poses::CPose3D &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
 		cl.def("insert", (struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, class mrpt::poses::CPose3D> >, bool> (std::map<std::string,mrpt::poses::CPose3D>::*)(const struct std::pair<const std::string, class mrpt::poses::CPose3D> &)) &std::map<std::string, mrpt::poses::CPose3D>::insert, "C++: std::map<std::string, mrpt::poses::CPose3D>::insert(const struct std::pair<const std::string, class mrpt::poses::CPose3D> &) --> struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, class mrpt::poses::CPose3D> >, bool>", pybind11::arg("__x"));
-		cl.def("erase", (unsigned long (std::map<std::string,mrpt::poses::CPose3D>::*)(const std::string &)) &std::map<std::string, mrpt::poses::CPose3D>::erase, "C++: std::map<std::string, mrpt::poses::CPose3D>::erase(const std::string &) --> unsigned long", pybind11::arg("__x"));
+		cl.def("erase", (size_t (std::map<std::string,mrpt::poses::CPose3D>::*)(const std::string &)) &std::map<std::string, mrpt::poses::CPose3D>::erase, "C++: std::map<std::string, mrpt::poses::CPose3D>::erase(const std::string &) --> size_t", pybind11::arg("__x"));
 		cl.def("swap", (void (std::map<std::string,mrpt::poses::CPose3D>::*)(class std::map<std::string, class mrpt::poses::CPose3D> &)) &std::map<std::string, mrpt::poses::CPose3D>::swap, "C++: std::map<std::string, mrpt::poses::CPose3D>::swap(class std::map<std::string, class mrpt::poses::CPose3D> &) --> void", pybind11::arg("__x"));
 		cl.def("clear", (void (std::map<std::string,mrpt::poses::CPose3D>::*)()) &std::map<std::string, mrpt::poses::CPose3D>::clear, "C++: std::map<std::string, mrpt::poses::CPose3D>::clear() --> void");
 		cl.def("key_comp", (struct std::less<std::string > (std::map<std::string,mrpt::poses::CPose3D>::*)() const) &std::map<std::string, mrpt::poses::CPose3D>::key_comp, "C++: std::map<std::string, mrpt::poses::CPose3D>::key_comp() const --> struct std::less<std::string >");
-		cl.def("count", (unsigned long (std::map<std::string,mrpt::poses::CPose3D>::*)(const std::string &) const) &std::map<std::string, mrpt::poses::CPose3D>::count, "C++: std::map<std::string, mrpt::poses::CPose3D>::count(const std::string &) const --> unsigned long", pybind11::arg("__x"));
+		cl.def("count", (size_t (std::map<std::string,mrpt::poses::CPose3D>::*)(const std::string &) const) &std::map<std::string, mrpt::poses::CPose3D>::count, "C++: std::map<std::string, mrpt::poses::CPose3D>::count(const std::string &) const --> size_t", pybind11::arg("__x"));
 		cl.def("equal_range", (struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, class mrpt::poses::CPose3D> >, struct std::_Rb_tree_iterator<struct std::pair<const std::string, class mrpt::poses::CPose3D> > > (std::map<std::string,mrpt::poses::CPose3D>::*)(const std::string &)) &std::map<std::string, mrpt::poses::CPose3D>::equal_range, "C++: std::map<std::string, mrpt::poses::CPose3D>::equal_range(const std::string &) --> struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const std::string, class mrpt::poses::CPose3D> >, struct std::_Rb_tree_iterator<struct std::pair<const std::string, class mrpt::poses::CPose3D> > >", pybind11::arg("__x"));
 	}
 }
diff --git a/python/src/std/stl_vector.cpp b/python/src/std/stl_vector.cpp
index e9110c758..f4c9f4013 100644
--- a/python/src/std/stl_vector.cpp
+++ b/python/src/std/stl_vector.cpp
@@ -26,38 +26,38 @@ void bind_std_stl_vector(std::function< pybind11::module &(std::string const &na
 		cl.def( pybind11::init( [](){ return new std::vector<std::string>(); } ) );
 		cl.def( pybind11::init<const class std::allocator<std::string > &>(), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::vector<std::string>(a0); } ), "doc" , pybind11::arg("__n"));
-		cl.def( pybind11::init<unsigned long, const class std::allocator<std::string > &>(), pybind11::arg("__n"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0){ return new std::vector<std::string>(a0); } ), "doc" , pybind11::arg("__n"));
+		cl.def( pybind11::init<size_t, const class std::allocator<std::string > &>(), pybind11::arg("__n"), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0, const std::string & a1){ return new std::vector<std::string>(a0, a1); } ), "doc" , pybind11::arg("__n"), pybind11::arg("__value"));
-		cl.def( pybind11::init<unsigned long, const std::string &, const class std::allocator<std::string > &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0, const std::string & a1){ return new std::vector<std::string>(a0, a1); } ), "doc" , pybind11::arg("__n"), pybind11::arg("__value"));
+		cl.def( pybind11::init<size_t, const std::string &, const class std::allocator<std::string > &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );
 
 		cl.def( pybind11::init( [](std::vector<std::string> const &o){ return new std::vector<std::string>(o); } ) );
 		cl.def( pybind11::init<const class std::vector<std::string > &, const class std::allocator<std::string > &>(), pybind11::arg("__x"), pybind11::arg("__a") );
 
 		cl.def("assign", (class std::vector<std::string > & (std::vector<std::string>::*)(const class std::vector<std::string > &)) &std::vector<std::string>::operator=, "C++: std::vector<std::string>::operator=(const class std::vector<std::string > &) --> class std::vector<std::string > &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
-		cl.def("assign", (void (std::vector<std::string>::*)(unsigned long, const std::string &)) &std::vector<std::string>::assign, "C++: std::vector<std::string>::assign(unsigned long, const std::string &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
+		cl.def("assign", (void (std::vector<std::string>::*)(size_t, const std::string &)) &std::vector<std::string>::assign, "C++: std::vector<std::string>::assign(size_t, const std::string &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
 		cl.def("begin", (class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > > (std::vector<std::string>::*)()) &std::vector<std::string>::begin, "C++: std::vector<std::string>::begin() --> class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > >");
 		cl.def("end", (class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > > (std::vector<std::string>::*)()) &std::vector<std::string>::end, "C++: std::vector<std::string>::end() --> class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > >");
 		cl.def("cbegin", (class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > > (std::vector<std::string>::*)() const) &std::vector<std::string>::cbegin, "C++: std::vector<std::string>::cbegin() const --> class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >");
 		cl.def("cend", (class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > > (std::vector<std::string>::*)() const) &std::vector<std::string>::cend, "C++: std::vector<std::string>::cend() const --> class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >");
-		cl.def("size", (unsigned long (std::vector<std::string>::*)() const) &std::vector<std::string>::size, "C++: std::vector<std::string>::size() const --> unsigned long");
-		cl.def("max_size", (unsigned long (std::vector<std::string>::*)() const) &std::vector<std::string>::max_size, "C++: std::vector<std::string>::max_size() const --> unsigned long");
-		cl.def("resize", (void (std::vector<std::string>::*)(unsigned long)) &std::vector<std::string>::resize, "C++: std::vector<std::string>::resize(unsigned long) --> void", pybind11::arg("__new_size"));
-		cl.def("resize", (void (std::vector<std::string>::*)(unsigned long, const std::string &)) &std::vector<std::string>::resize, "C++: std::vector<std::string>::resize(unsigned long, const std::string &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
+		cl.def("size", (size_t (std::vector<std::string>::*)() const) &std::vector<std::string>::size, "C++: std::vector<std::string>::size() const --> size_t");
+		cl.def("max_size", (size_t (std::vector<std::string>::*)() const) &std::vector<std::string>::max_size, "C++: std::vector<std::string>::max_size() const --> size_t");
+		cl.def("resize", (void (std::vector<std::string>::*)(size_t)) &std::vector<std::string>::resize, "C++: std::vector<std::string>::resize(size_t) --> void", pybind11::arg("__new_size"));
+		cl.def("resize", (void (std::vector<std::string>::*)(size_t, const std::string &)) &std::vector<std::string>::resize, "C++: std::vector<std::string>::resize(size_t, const std::string &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
 		cl.def("shrink_to_fit", (void (std::vector<std::string>::*)()) &std::vector<std::string>::shrink_to_fit, "C++: std::vector<std::string>::shrink_to_fit() --> void");
-		cl.def("capacity", (unsigned long (std::vector<std::string>::*)() const) &std::vector<std::string>::capacity, "C++: std::vector<std::string>::capacity() const --> unsigned long");
+		cl.def("capacity", (size_t (std::vector<std::string>::*)() const) &std::vector<std::string>::capacity, "C++: std::vector<std::string>::capacity() const --> size_t");
 		cl.def("empty", (bool (std::vector<std::string>::*)() const) &std::vector<std::string>::empty, "C++: std::vector<std::string>::empty() const --> bool");
-		cl.def("reserve", (void (std::vector<std::string>::*)(unsigned long)) &std::vector<std::string>::reserve, "C++: std::vector<std::string>::reserve(unsigned long) --> void", pybind11::arg("__n"));
-		cl.def("__getitem__", (std::string & (std::vector<std::string>::*)(unsigned long)) &std::vector<std::string>::operator[], "C++: std::vector<std::string>::operator[](unsigned long) --> std::string &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
-		cl.def("at", (std::string & (std::vector<std::string>::*)(unsigned long)) &std::vector<std::string>::at, "C++: std::vector<std::string>::at(unsigned long) --> std::string &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("reserve", (void (std::vector<std::string>::*)(size_t)) &std::vector<std::string>::reserve, "C++: std::vector<std::string>::reserve(size_t) --> void", pybind11::arg("__n"));
+		cl.def("__getitem__", (std::string & (std::vector<std::string>::*)(size_t)) &std::vector<std::string>::operator[], "C++: std::vector<std::string>::operator[](size_t) --> std::string &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("at", (std::string & (std::vector<std::string>::*)(size_t)) &std::vector<std::string>::at, "C++: std::vector<std::string>::at(size_t) --> std::string &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
 		cl.def("front", (std::string & (std::vector<std::string>::*)()) &std::vector<std::string>::front, "C++: std::vector<std::string>::front() --> std::string &", pybind11::return_value_policy::automatic);
 		cl.def("back", (std::string & (std::vector<std::string>::*)()) &std::vector<std::string>::back, "C++: std::vector<std::string>::back() --> std::string &", pybind11::return_value_policy::automatic);
 		cl.def("data", (std::string * (std::vector<std::string>::*)()) &std::vector<std::string>::data, "C++: std::vector<std::string>::data() --> std::string *", pybind11::return_value_policy::automatic);
 		cl.def("push_back", (void (std::vector<std::string>::*)(const std::string &)) &std::vector<std::string>::push_back, "C++: std::vector<std::string>::push_back(const std::string &) --> void", pybind11::arg("__x"));
 		cl.def("pop_back", (void (std::vector<std::string>::*)()) &std::vector<std::string>::pop_back, "C++: std::vector<std::string>::pop_back() --> void");
 		cl.def("insert", (class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > > (std::vector<std::string>::*)(class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >, const std::string &)) &std::vector<std::string>::insert, "C++: std::vector<std::string>::insert(class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >, const std::string &) --> class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > >", pybind11::arg("__position"), pybind11::arg("__x"));
-		cl.def("insert", (class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > > (std::vector<std::string>::*)(class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >, unsigned long, const std::string &)) &std::vector<std::string>::insert, "C++: std::vector<std::string>::insert(class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >, unsigned long, const std::string &) --> class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > >", pybind11::arg("__position"), pybind11::arg("__n"), pybind11::arg("__x"));
+		cl.def("insert", (class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > > (std::vector<std::string>::*)(class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >, size_t, const std::string &)) &std::vector<std::string>::insert, "C++: std::vector<std::string>::insert(class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >, size_t, const std::string &) --> class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > >", pybind11::arg("__position"), pybind11::arg("__n"), pybind11::arg("__x"));
 		cl.def("erase", (class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > > (std::vector<std::string>::*)(class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >)) &std::vector<std::string>::erase, "C++: std::vector<std::string>::erase(class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >) --> class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > >", pybind11::arg("__position"));
 		cl.def("erase", (class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > > (std::vector<std::string>::*)(class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >, class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >)) &std::vector<std::string>::erase, "C++: std::vector<std::string>::erase(class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >, class __gnu_cxx::__normal_iterator<const std::string *, class std::vector<std::string > >) --> class __gnu_cxx::__normal_iterator<std::string *, class std::vector<std::string > >", pybind11::arg("__first"), pybind11::arg("__last"));
 		cl.def("swap", (void (std::vector<std::string>::*)(class std::vector<std::string > &)) &std::vector<std::string>::swap, "C++: std::vector<std::string>::swap(class std::vector<std::string > &) --> void", pybind11::arg("__x"));
