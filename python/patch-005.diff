diff --git a/python/src/std/stl_deque_1.cpp b/python/src/std/stl_deque_1.cpp
index a80326114..b16449336 100644
--- a/python/src/std/stl_deque_1.cpp
+++ b/python/src/std/stl_deque_1.cpp
@@ -36,26 +36,26 @@ void bind_std_stl_deque_1(std::function< pybind11::module &(std::string const &n
 		cl.def( pybind11::init( [](){ return new std::deque<mrpt::math::TPose3D>(); } ) );
 		cl.def( pybind11::init<const class std::allocator<struct mrpt::math::TPose3D> &>(), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::deque<mrpt::math::TPose3D>(a0); } ), "doc" , pybind11::arg("__n"));
-		cl.def( pybind11::init<unsigned long, const class std::allocator<struct mrpt::math::TPose3D> &>(), pybind11::arg("__n"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0){ return new std::deque<mrpt::math::TPose3D>(a0); } ), "doc" , pybind11::arg("__n"));
+		cl.def( pybind11::init<size_t, const class std::allocator<struct mrpt::math::TPose3D> &>(), pybind11::arg("__n"), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0, const struct mrpt::math::TPose3D & a1){ return new std::deque<mrpt::math::TPose3D>(a0, a1); } ), "doc" , pybind11::arg("__n"), pybind11::arg("__value"));
-		cl.def( pybind11::init<unsigned long, const struct mrpt::math::TPose3D &, const class std::allocator<struct mrpt::math::TPose3D> &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0, const struct mrpt::math::TPose3D & a1){ return new std::deque<mrpt::math::TPose3D>(a0, a1); } ), "doc" , pybind11::arg("__n"), pybind11::arg("__value"));
+		cl.def( pybind11::init<size_t, const struct mrpt::math::TPose3D &, const class std::allocator<struct mrpt::math::TPose3D> &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );
 
 		cl.def( pybind11::init( [](std::deque<mrpt::math::TPose3D> const &o){ return new std::deque<mrpt::math::TPose3D>(o); } ) );
 		cl.def( pybind11::init<const class std::deque<struct mrpt::math::TPose3D> &, const class std::allocator<struct mrpt::math::TPose3D> &>(), pybind11::arg("__x"), pybind11::arg("__a") );
 
 		cl.def("assign", (class std::deque<struct mrpt::math::TPose3D> & (std::deque<mrpt::math::TPose3D>::*)(const class std::deque<struct mrpt::math::TPose3D> &)) &std::deque<mrpt::math::TPose3D>::operator=, "C++: std::deque<mrpt::math::TPose3D>::operator=(const class std::deque<struct mrpt::math::TPose3D> &) --> class std::deque<struct mrpt::math::TPose3D> &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
-		cl.def("assign", (void (std::deque<mrpt::math::TPose3D>::*)(unsigned long, const struct mrpt::math::TPose3D &)) &std::deque<mrpt::math::TPose3D>::assign, "C++: std::deque<mrpt::math::TPose3D>::assign(unsigned long, const struct mrpt::math::TPose3D &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
+		cl.def("assign", (void (std::deque<mrpt::math::TPose3D>::*)(size_t, const struct mrpt::math::TPose3D &)) &std::deque<mrpt::math::TPose3D>::assign, "C++: std::deque<mrpt::math::TPose3D>::assign(size_t, const struct mrpt::math::TPose3D &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
 		cl.def("get_allocator", (class std::allocator<struct mrpt::math::TPose3D> (std::deque<mrpt::math::TPose3D>::*)() const) &std::deque<mrpt::math::TPose3D>::get_allocator, "C++: std::deque<mrpt::math::TPose3D>::get_allocator() const --> class std::allocator<struct mrpt::math::TPose3D>");
-		cl.def("size", (unsigned long (std::deque<mrpt::math::TPose3D>::*)() const) &std::deque<mrpt::math::TPose3D>::size, "C++: std::deque<mrpt::math::TPose3D>::size() const --> unsigned long");
-		cl.def("max_size", (unsigned long (std::deque<mrpt::math::TPose3D>::*)() const) &std::deque<mrpt::math::TPose3D>::max_size, "C++: std::deque<mrpt::math::TPose3D>::max_size() const --> unsigned long");
-		cl.def("resize", (void (std::deque<mrpt::math::TPose3D>::*)(unsigned long)) &std::deque<mrpt::math::TPose3D>::resize, "C++: std::deque<mrpt::math::TPose3D>::resize(unsigned long) --> void", pybind11::arg("__new_size"));
-		cl.def("resize", (void (std::deque<mrpt::math::TPose3D>::*)(unsigned long, const struct mrpt::math::TPose3D &)) &std::deque<mrpt::math::TPose3D>::resize, "C++: std::deque<mrpt::math::TPose3D>::resize(unsigned long, const struct mrpt::math::TPose3D &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
+		cl.def("size", (size_t (std::deque<mrpt::math::TPose3D>::*)() const) &std::deque<mrpt::math::TPose3D>::size, "C++: std::deque<mrpt::math::TPose3D>::size() const --> size_t");
+		cl.def("max_size", (size_t (std::deque<mrpt::math::TPose3D>::*)() const) &std::deque<mrpt::math::TPose3D>::max_size, "C++: std::deque<mrpt::math::TPose3D>::max_size() const --> size_t");
+		cl.def("resize", (void (std::deque<mrpt::math::TPose3D>::*)(size_t)) &std::deque<mrpt::math::TPose3D>::resize, "C++: std::deque<mrpt::math::TPose3D>::resize(size_t) --> void", pybind11::arg("__new_size"));
+		cl.def("resize", (void (std::deque<mrpt::math::TPose3D>::*)(size_t, const struct mrpt::math::TPose3D &)) &std::deque<mrpt::math::TPose3D>::resize, "C++: std::deque<mrpt::math::TPose3D>::resize(size_t, const struct mrpt::math::TPose3D &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
 		cl.def("shrink_to_fit", (void (std::deque<mrpt::math::TPose3D>::*)()) &std::deque<mrpt::math::TPose3D>::shrink_to_fit, "C++: std::deque<mrpt::math::TPose3D>::shrink_to_fit() --> void");
 		cl.def("empty", (bool (std::deque<mrpt::math::TPose3D>::*)() const) &std::deque<mrpt::math::TPose3D>::empty, "C++: std::deque<mrpt::math::TPose3D>::empty() const --> bool");
-		cl.def("__getitem__", (struct mrpt::math::TPose3D & (std::deque<mrpt::math::TPose3D>::*)(unsigned long)) &std::deque<mrpt::math::TPose3D>::operator[], "C++: std::deque<mrpt::math::TPose3D>::operator[](unsigned long) --> struct mrpt::math::TPose3D &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
-		cl.def("at", (struct mrpt::math::TPose3D & (std::deque<mrpt::math::TPose3D>::*)(unsigned long)) &std::deque<mrpt::math::TPose3D>::at, "C++: std::deque<mrpt::math::TPose3D>::at(unsigned long) --> struct mrpt::math::TPose3D &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("__getitem__", (struct mrpt::math::TPose3D & (std::deque<mrpt::math::TPose3D>::*)(size_t)) &std::deque<mrpt::math::TPose3D>::operator[], "C++: std::deque<mrpt::math::TPose3D>::operator[](size_t) --> struct mrpt::math::TPose3D &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("at", (struct mrpt::math::TPose3D & (std::deque<mrpt::math::TPose3D>::*)(size_t)) &std::deque<mrpt::math::TPose3D>::at, "C++: std::deque<mrpt::math::TPose3D>::at(size_t) --> struct mrpt::math::TPose3D &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
 		cl.def("front", (struct mrpt::math::TPose3D & (std::deque<mrpt::math::TPose3D>::*)()) &std::deque<mrpt::math::TPose3D>::front, "C++: std::deque<mrpt::math::TPose3D>::front() --> struct mrpt::math::TPose3D &", pybind11::return_value_policy::automatic);
 		cl.def("back", (struct mrpt::math::TPose3D & (std::deque<mrpt::math::TPose3D>::*)()) &std::deque<mrpt::math::TPose3D>::back, "C++: std::deque<mrpt::math::TPose3D>::back() --> struct mrpt::math::TPose3D &", pybind11::return_value_policy::automatic);
 		cl.def("push_front", (void (std::deque<mrpt::math::TPose3D>::*)(const struct mrpt::math::TPose3D &)) &std::deque<mrpt::math::TPose3D>::push_front, "C++: std::deque<mrpt::math::TPose3D>::push_front(const struct mrpt::math::TPose3D &) --> void", pybind11::arg("__x"));
@@ -70,21 +70,21 @@ void bind_std_stl_deque_1(std::function< pybind11::module &(std::string const &n
 		cl.def( pybind11::init( [](){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>(); } ) );
 		cl.def( pybind11::init<const class std::allocator<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> > &>(), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>(a0); } ), "doc" , pybind11::arg("__n"));
-		cl.def( pybind11::init<unsigned long, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> > &>(), pybind11::arg("__n"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>(a0); } ), "doc" , pybind11::arg("__n"));
+		cl.def( pybind11::init<size_t, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> > &>(), pybind11::arg("__n"), pybind11::arg("__a") );
 
 		cl.def( pybind11::init( [](std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>> const &o){ return new std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>(o); } ) );
 		cl.def( pybind11::init<const class std::deque<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> > &, const class std::allocator<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> > &>(), pybind11::arg("__x"), pybind11::arg("__a") );
 
 		cl.def("assign", (class std::deque<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> > & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)(const class std::deque<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> > &)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::operator=, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::operator=(const class std::deque<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> > &) --> class std::deque<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> > &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
 		cl.def("get_allocator", (class std::allocator<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> > (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::get_allocator, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::get_allocator() const --> class std::allocator<struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> >");
-		cl.def("size", (unsigned long (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::size() const --> unsigned long");
-		cl.def("max_size", (unsigned long (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::max_size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::max_size() const --> unsigned long");
-		cl.def("resize", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)(unsigned long)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::resize, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::resize(unsigned long) --> void", pybind11::arg("__new_size"));
+		cl.def("size", (size_t (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::size() const --> size_t");
+		cl.def("max_size", (size_t (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::max_size, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::max_size() const --> size_t");
+		cl.def("resize", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)(size_t)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::resize, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::resize(size_t) --> void", pybind11::arg("__new_size"));
 		cl.def("shrink_to_fit", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)()) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::shrink_to_fit, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::shrink_to_fit() --> void");
 		cl.def("empty", (bool (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)() const) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::empty, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::empty() const --> bool");
-		cl.def("__getitem__", (struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)(unsigned long)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::operator[], "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::operator[](unsigned long) --> struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
-		cl.def("at", (struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)(unsigned long)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::at, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::at(unsigned long) --> struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("__getitem__", (struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)(size_t)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::operator[], "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::operator[](size_t) --> struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("at", (struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)(size_t)) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::at, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::at(size_t) --> struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
 		cl.def("front", (struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)()) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::front, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::front() --> struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> &", pybind11::return_value_policy::automatic);
 		cl.def("back", (struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> & (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)()) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::back, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::back() --> struct mrpt::bayes::CProbabilityParticle<class mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER> &", pybind11::return_value_policy::automatic);
 		cl.def("pop_front", (void (std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::*)()) &std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::pop_front, "C++: std::deque<mrpt::bayes::CProbabilityParticle<mrpt::maps::CRBPFParticleData, mrpt::bayes::particle_storage_mode::POINTER>>::pop_front() --> void");
diff --git a/python/src/std/stl_deque_2.cpp b/python/src/std/stl_deque_2.cpp
index 54e7eaaf4..3ad4f52e7 100644
--- a/python/src/std/stl_deque_2.cpp
+++ b/python/src/std/stl_deque_2.cpp
@@ -25,26 +25,26 @@ void bind_std_stl_deque_2(std::function< pybind11::module &(std::string const &n
 		cl.def( pybind11::init( [](){ return new std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>(); } ) );
 		cl.def( pybind11::init<const class std::allocator<struct mrpt::system::CDirectoryExplorer::TFileInfo> &>(), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>(a0); } ), "doc" , pybind11::arg("__n"));
-		cl.def( pybind11::init<unsigned long, const class std::allocator<struct mrpt::system::CDirectoryExplorer::TFileInfo> &>(), pybind11::arg("__n"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0){ return new std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>(a0); } ), "doc" , pybind11::arg("__n"));
+		cl.def( pybind11::init<size_t, const class std::allocator<struct mrpt::system::CDirectoryExplorer::TFileInfo> &>(), pybind11::arg("__n"), pybind11::arg("__a") );
 
-		cl.def( pybind11::init( [](unsigned long const & a0, const struct mrpt::system::CDirectoryExplorer::TFileInfo & a1){ return new std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>(a0, a1); } ), "doc" , pybind11::arg("__n"), pybind11::arg("__value"));
-		cl.def( pybind11::init<unsigned long, const struct mrpt::system::CDirectoryExplorer::TFileInfo &, const class std::allocator<struct mrpt::system::CDirectoryExplorer::TFileInfo> &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );
+		cl.def( pybind11::init( [](size_t const & a0, const struct mrpt::system::CDirectoryExplorer::TFileInfo & a1){ return new std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>(a0, a1); } ), "doc" , pybind11::arg("__n"), pybind11::arg("__value"));
+		cl.def( pybind11::init<size_t, const struct mrpt::system::CDirectoryExplorer::TFileInfo &, const class std::allocator<struct mrpt::system::CDirectoryExplorer::TFileInfo> &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );
 
 		cl.def( pybind11::init( [](std::deque<mrpt::system::CDirectoryExplorer::TFileInfo> const &o){ return new std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>(o); } ) );
 		cl.def( pybind11::init<const class std::deque<struct mrpt::system::CDirectoryExplorer::TFileInfo> &, const class std::allocator<struct mrpt::system::CDirectoryExplorer::TFileInfo> &>(), pybind11::arg("__x"), pybind11::arg("__a") );
 
 		cl.def("assign", (class std::deque<struct mrpt::system::CDirectoryExplorer::TFileInfo> & (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(const class std::deque<struct mrpt::system::CDirectoryExplorer::TFileInfo> &)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::operator=, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::operator=(const class std::deque<struct mrpt::system::CDirectoryExplorer::TFileInfo> &) --> class std::deque<struct mrpt::system::CDirectoryExplorer::TFileInfo> &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
-		cl.def("assign", (void (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(unsigned long, const struct mrpt::system::CDirectoryExplorer::TFileInfo &)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::assign, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::assign(unsigned long, const struct mrpt::system::CDirectoryExplorer::TFileInfo &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
+		cl.def("assign", (void (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(size_t, const struct mrpt::system::CDirectoryExplorer::TFileInfo &)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::assign, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::assign(size_t, const struct mrpt::system::CDirectoryExplorer::TFileInfo &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
 		cl.def("get_allocator", (class std::allocator<struct mrpt::system::CDirectoryExplorer::TFileInfo> (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)() const) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::get_allocator, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::get_allocator() const --> class std::allocator<struct mrpt::system::CDirectoryExplorer::TFileInfo>");
-		cl.def("size", (unsigned long (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)() const) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::size, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::size() const --> unsigned long");
-		cl.def("max_size", (unsigned long (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)() const) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::max_size, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::max_size() const --> unsigned long");
-		cl.def("resize", (void (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(unsigned long)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::resize, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::resize(unsigned long) --> void", pybind11::arg("__new_size"));
-		cl.def("resize", (void (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(unsigned long, const struct mrpt::system::CDirectoryExplorer::TFileInfo &)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::resize, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::resize(unsigned long, const struct mrpt::system::CDirectoryExplorer::TFileInfo &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
+		cl.def("size", (size_t (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)() const) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::size, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::size() const --> size_t");
+		cl.def("max_size", (size_t (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)() const) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::max_size, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::max_size() const --> size_t");
+		cl.def("resize", (void (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(size_t)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::resize, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::resize(size_t) --> void", pybind11::arg("__new_size"));
+		cl.def("resize", (void (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(size_t, const struct mrpt::system::CDirectoryExplorer::TFileInfo &)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::resize, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::resize(size_t, const struct mrpt::system::CDirectoryExplorer::TFileInfo &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
 		cl.def("shrink_to_fit", (void (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)()) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::shrink_to_fit, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::shrink_to_fit() --> void");
 		cl.def("empty", (bool (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)() const) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::empty, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::empty() const --> bool");
-		cl.def("__getitem__", (struct mrpt::system::CDirectoryExplorer::TFileInfo & (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(unsigned long)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::operator[], "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::operator[](unsigned long) --> struct mrpt::system::CDirectoryExplorer::TFileInfo &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
-		cl.def("at", (struct mrpt::system::CDirectoryExplorer::TFileInfo & (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(unsigned long)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::at, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::at(unsigned long) --> struct mrpt::system::CDirectoryExplorer::TFileInfo &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("__getitem__", (struct mrpt::system::CDirectoryExplorer::TFileInfo & (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(size_t)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::operator[], "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::operator[](size_t) --> struct mrpt::system::CDirectoryExplorer::TFileInfo &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
+		cl.def("at", (struct mrpt::system::CDirectoryExplorer::TFileInfo & (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(size_t)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::at, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::at(size_t) --> struct mrpt::system::CDirectoryExplorer::TFileInfo &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
 		cl.def("front", (struct mrpt::system::CDirectoryExplorer::TFileInfo & (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)()) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::front, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::front() --> struct mrpt::system::CDirectoryExplorer::TFileInfo &", pybind11::return_value_policy::automatic);
 		cl.def("back", (struct mrpt::system::CDirectoryExplorer::TFileInfo & (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)()) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::back, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::back() --> struct mrpt::system::CDirectoryExplorer::TFileInfo &", pybind11::return_value_policy::automatic);
 		cl.def("push_front", (void (std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::*)(const struct mrpt::system::CDirectoryExplorer::TFileInfo &)) &std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::push_front, "C++: std::deque<mrpt::system::CDirectoryExplorer::TFileInfo>::push_front(const struct mrpt::system::CDirectoryExplorer::TFileInfo &) --> void", pybind11::arg("__x"));
